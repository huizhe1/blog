<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[聊聊 JAVA 异常]]></title>
      <url>/JAVA/Throwable/</url>
      <content type="html"><![CDATA[<p>异常对象都是派生于Throwable 类的一个实例。</p>
<p>异常层次结构简化示意图:</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/4/26/16301c82ebcc2b92?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="异常层次结构简化示意图"></p>
<p>所有的异常都是由Throwable 继承而来，但在下一层立即分解为两个分支：Error 和 Exception</p>
<p>Error类层次结构描述了Java运行时系统的<strong>内部错误</strong>和<strong>资源耗尽错误</strong></p>
<h3 id="Exception-层次"><a href="#Exception-层次" class="headerlink" title="Exception 层次"></a>Exception 层次</h3><p>Exception 层次分解为两个分支： <strong>RuntimeException</strong> 和 <strong>其他异常</strong></p>
<h4 id="RuntimeException-异常："><a href="#RuntimeException-异常：" class="headerlink" title="RuntimeException 异常："></a>RuntimeException 异常：</h4><ol>
<li>错误的类型转换 ClassCastException </li>
<li>数组访问越界 ArrayIndexOutOfBoundsException </li>
<li>访问null指针 NullPointerException </li>
</ol>
<h4 id="不是派生于-RuntimeException-异常包括："><a href="#不是派生于-RuntimeException-异常包括：" class="headerlink" title="不是派生于 RuntimeException 异常包括："></a>不是派生于 RuntimeException 异常包括：</h4><ol>
<li>试图在文件尾部后面读取数据</li>
<li>试图打开一个不存在的文件</li>
<li>试图根据给定的字符串查找Class对象，而这个字符串表示的类并不存在</li>
</ol>
<p>Java语言规范将派生于 Error 异常或 RuntimeException 类的所有异常称为<strong>非受查(unchecked) 异常</strong>。</p>
<p>所有其他的异常称为<strong>受查(checked)异常</strong>。</p>
<h4 id="什么时候该抛出异常-throws-："><a href="#什么时候该抛出异常-throws-：" class="headerlink" title="什么时候该抛出异常 throws ："></a>什么时候该抛出异常 <strong>throws</strong> ：</h4><ol>
<li>调用一个抛出受查异常的方法</li>
<li>运行时发现错误，利用 <strong>throw</strong> 语句抛出一个受查异常</li>
<li>程序出现错误，如 ArrayIndexOutOfBoundsException 这样的非受查异常</li>
<li>Java 虚拟机和运行时库出现的内部错误</li>
</ol>
<p>子类方法中声明的受查异常并不能比超类方法中声明的异常更通用，即子类方法中可抛出更特定的异常，或者根本不抛出任何异常。特别声明：如果超类方法没有抛出任何受查异常，子类也不能抛出任何受查异常。</p>
<h4 id="自定义异常："><a href="#自定义异常：" class="headerlink" title="自定义异常："></a>自定义异常：</h4><ol>
<li>定义一个派生于Exception的类，或者派生于Exception子类的类。</li>
<li>习惯上，定义的类应该包含两个构造器。一个默认的构造器，另一个是带有详细描述信息构造器。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileFormatException</span> <span class="keyword">extends</span> <span class="title">IOException</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">FileFormatException</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">FileFormatException</span><span class="params">(String message)</span></span></div><div class="line"><span class="function">	</span>&#123;</div><div class="line">		<span class="keyword">super</span>(message);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="API-java-lang-Throwable"><a href="#API-java-lang-Throwable" class="headerlink" title="API java.lang.Throwable"></a>API java.lang.Throwable</h4><ul>
<li>Throwable() 构造一个新的Throwable 对象，这个对象没有详细的描述信息</li>
<li>Throwable(String message) 构造一个新的Throwable，这个对象带有特定的详细描述信息。习惯上，所有的派生的异常类都支持一个默认的构造器和一个带有详细信息的构造器。</li>
<li>String getMessage() 获得Throwable 对象的详细描述信息</li>
</ul>
<h4 id="异常处理小技巧"><a href="#异常处理小技巧" class="headerlink" title="异常处理小技巧"></a>异常处理小技巧</h4><p>一般异常处理最好的选择，就是将异常传递给调用者，让调用者自己去操心。</p>
<p>在catch 字句中可以抛出一个异常，这样做的目的是改变异常的类型。我们可以采用一种比较推荐的处理异常的方法，并且将原始异常设置为新异常的”原因”:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span></div><div class="line">&#123;</div><div class="line">	access the database</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span>(SQLException e)</div><div class="line">&#123;</div><div class="line">	Throwable se = <span class="keyword">new</span> ServletException(<span class="string">"database error"</span>);</div><div class="line">	se.initCause(e);</div><div class="line">	<span class="keyword">throw</span> se;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当捕获到异常时，就可以使用下面这条语句重新得到原始异常：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Throwable e = se.getCause();</div></pre></td></tr></table></figure></p>
<p><strong>使用这种包装技术，可让用户抛出子系统中的高级异常，而不会丢失原始异常的细节</strong></p>
<p>如果在一个方法中发生了一个受查异常，而不允许抛出它，那包装技术就十分有用。我们可捕获这个受查异常，并将它包装成一个运行时异常。</p>
<h4 id="finally-语句"><a href="#finally-语句" class="headerlink" title="finally 语句"></a>finally 语句</h4><p> 不管是否有异常被捕获，finally 字句中的代码都被执行。</p>
<p>当finally字句包含return 语句时，将会出现一种意想不到的结果。</p>
<p>假设利用return 语句从try语句块中退出。在方法返回前，finally字句的内容将被执行。如果finally字句中也有一个return语句，这个返回值将会覆盖原始的返回值。例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">try</span>&#123;</div><div class="line">        <span class="keyword">return</span> n*n;</div><div class="line">    &#125;<span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="number">2</span> == n)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果调用f(2)  ，try语句返回结果为4，然而在方法返回前，要执行finally字句。finally字句使得方法返回0。这个返回值覆盖了原先的返回值4。所以调用 f(2) 返回的值为 <strong>0</strong>。</p>
<h3 id="JAVA-SE7-关闭资源的处理"><a href="#JAVA-SE7-关闭资源的处理" class="headerlink" title="JAVA SE7 关闭资源的处理"></a>JAVA SE7 关闭资源的处理</h3><p>待资源的try 语句(try-with-resources) 的最简形式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>(Resource res = ...)</div><div class="line">&#123;</div><div class="line">	work with res</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>try 块退出时，会自动调用res.close()</strong></p>
<p>指定多个资源：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>(Scanner in = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> FileInputStream(<span class="string">"/usr/shar/dict/words"</span>),<span class="string">"UTF-8"</span>);</div><div class="line">        PrintWriter out = <span class="keyword">new</span> PrintWriter(<span class="string">"out.txt"</span>))&#123;</div><div class="line">            <span class="keyword">while</span> (in.hasNext())</div><div class="line">            out.println(in.next().toUpperCase());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>不管这个块如何退出，in 和 out 都会关闭。</p>
<p>常规方式手动编程，就需要两个嵌套的try/finally 语句。</p>
<h3 id="堆栈轨迹-stack-trace"><a href="#堆栈轨迹-stack-trace" class="headerlink" title="堆栈轨迹(stack trace)"></a>堆栈轨迹(stack trace)</h3><p>堆栈轨迹是一个方法调用过程的列表，它包含了程序执行过程中方法调用的特定位置。</p>
<h4 id="访问堆栈轨迹的文本描述信息"><a href="#访问堆栈轨迹的文本描述信息" class="headerlink" title="访问堆栈轨迹的文本描述信息"></a>访问堆栈轨迹的文本描述信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Throwable t = <span class="keyword">new</span> Throwable();</div><div class="line">StackTraceElement[] frames = t.getStackTrace();</div><div class="line"><span class="keyword">for</span> (StackTraceElement frame : frames)&#123;</div><div class="line">	analyze frame</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>StackTraceElement</strong> 类含有能够获得文件名和当前执行的代码行号的方法。同时，还含有能够获得类名和方法名的方法。</p>
<p>静态的 <strong>Thread.getAllStackTrace</strong> 方法，它可以产生所有线程的堆栈轨迹。例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Map&lt;Thread, StackTraceElement[]&gt; map = Thread.getAllStackTraces();</div><div class="line"><span class="keyword">for</span> (Thread t : map.keySet())&#123;</div><div class="line">    StackTraceElement[] frames = map.get(t);</div><div class="line">    analyze frames</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="打印一个递归阶乘的函数的堆栈情况"><a href="#打印一个递归阶乘的函数的堆栈情况" class="headerlink" title="打印一个递归阶乘的函数的堆栈情况"></a>打印一个递归阶乘的函数的堆栈情况</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackTraceTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 计算n的阶乘</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> n</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        System.out.println(<span class="string">"factorial("</span> + n + <span class="string">"):"</span>);</div><div class="line">        Throwable t = <span class="keyword">new</span> Throwable();</div><div class="line">        StackTraceElement[] frames = t.getStackTrace();</div><div class="line">        <span class="keyword">for</span> (StackTraceElement f: frames)</div><div class="line">            System.out.println(f);</div><div class="line">        <span class="keyword">int</span> r;</div><div class="line">        <span class="keyword">if</span> (n&lt;=<span class="number">1</span>)</div><div class="line">            r =<span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            r = n * factorial(n-<span class="number">1</span>);</div><div class="line">        System.out.println(<span class="string">"return "</span> + r);</div><div class="line">        <span class="keyword">return</span> r;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        System.out.print(<span class="string">"Enter n : "</span>);</div><div class="line">        <span class="keyword">int</span> n = in.nextInt();</div><div class="line">        factorial(n);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>计算factorial(3),打印一下内容</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">factorial(<span class="number">3</span>):</div><div class="line">javabook.StackTraceTest.factorial(StackTraceTest.java:<span class="number">15</span>)</div><div class="line">javabook.StackTraceTest.main(StackTraceTest.java:<span class="number">32</span>)</div><div class="line">factorial(<span class="number">2</span>):</div><div class="line">javabook.StackTraceTest.factorial(StackTraceTest.java:<span class="number">15</span>)</div><div class="line">javabook.StackTraceTest.factorial(StackTraceTest.java:<span class="number">23</span>)</div><div class="line">javabook.StackTraceTest.main(StackTraceTest.java:<span class="number">32</span>)</div><div class="line">factorial(<span class="number">1</span>):</div><div class="line">javabook.StackTraceTest.factorial(StackTraceTest.java:<span class="number">15</span>)</div><div class="line">javabook.StackTraceTest.factorial(StackTraceTest.java:<span class="number">23</span>)</div><div class="line">javabook.StackTraceTest.factorial(StackTraceTest.java:<span class="number">23</span>)</div><div class="line">javabook.StackTraceTest.main(StackTraceTest.java:<span class="number">32</span>)</div><div class="line"><span class="keyword">return</span> <span class="number">1</span></div><div class="line"><span class="keyword">return</span> <span class="number">2</span></div><div class="line"><span class="keyword">return</span> <span class="number">6</span></div></pre></td></tr></table></figure></p>
<h3 id="使用异常小技巧"><a href="#使用异常小技巧" class="headerlink" title="使用异常小技巧"></a>使用异常小技巧</h3><h4 id="异常处理不能代替简单的测试"><a href="#异常处理不能代替简单的测试" class="headerlink" title="异常处理不能代替简单的测试"></a>异常处理不能代替简单的测试</h4><p>与执行简单的测试相比，捕获异常所花费的时间大大超过前者。因此使用异常的基本规则是，旨在异常情况下使用异常机制。</p>
<h4 id="不要过分地细化异常"><a href="#不要过分地细化异常" class="headerlink" title="不要过分地细化异常"></a>不要过分地细化异常</h4><p>将整个任务包装在一个try块中，这样，当任何一个操作出现问题时，整个任务都可以取消。</p>
<h4 id="利用异常层次结构"><a href="#利用异常层次结构" class="headerlink" title="利用异常层次结构"></a>利用异常层次结构</h4><ul>
<li>不要只抛出 RuntimeException 异常。应该寻找更加适当的子类或创建自己的异常类。</li>
<li>不要只捕获Throwable 异常，否则，会使程序代码更难读、更难维护</li>
<li>考虑受查异常和非受查异常的区别。</li>
<li>将一种异常转换成另一种更加适合的异常时不要犹豫。</li>
</ul>
<h4 id="不要压制异常"><a href="#不要压制异常" class="headerlink" title="不要压制异常"></a>不要压制异常</h4><p>在java中，往往强化地倾向关闭异常。</p>
<h4 id="在检测错误时，“苛刻”要比放任更好"><a href="#在检测错误时，“苛刻”要比放任更好" class="headerlink" title="在检测错误时，“苛刻”要比放任更好"></a>在检测错误时，“苛刻”要比放任更好</h4><p>例如，当栈空时，Stack.pop 是要返回一个null，还是抛出一个异常？我们认为：在出错的地方抛出一个  EmptyStackException异常要比在后面抛出一个 NullPointerException 异常更好。</p>
<h4 id="不要羞于传递异常"><a href="#不要羞于传递异常" class="headerlink" title="不要羞于传递异常"></a>不要羞于传递异常</h4><p>让高层次的方法通知用户发生了错误，或者放弃不成功的命令更加适宜。                                   </p>
<h4 id="5-和-6-可以归纳为“早抛出，晚捕获”。"><a href="#5-和-6-可以归纳为“早抛出，晚捕获”。" class="headerlink" title="5 和 6 可以归纳为“早抛出，晚捕获”。"></a>5 和 6 可以归纳为“早抛出，晚捕获”。</h4><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://book.douban.com/subject/3146174/" target="_blank" rel="external">JAVA核心技术（卷1）原书第10版</a></p>
]]></content>
      
        <categories>
            
            <category> JAVA </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浅谈反射]]></title>
      <url>/JAVA/reflection/</url>
      <content type="html"><![CDATA[<p>反射：能够分析类能力的程序称为反射。反射是一种功能强大且复杂的机制。使用它的主要人员是工具构造者，而不是应用程序员。</p>
<p>反射机制：当程序无法获知对象类型时，在运行期间动态获取类的所有属性和方法。<br><a id="more"></a></p>
<h3 id="反射机制作用"><a href="#反射机制作用" class="headerlink" title="反射机制作用"></a>反射机制作用</h3><ol>
<li>在运行时分析类的能力</li>
<li>在运行时查看对象</li>
<li>实现通用的数组操作代码</li>
</ol>
<h3 id="反射机制的实现"><a href="#反射机制的实现" class="headerlink" title="反射机制的实现"></a>反射机制的实现</h3><p>采用Class类和java.lang.reflect 类库一起实现 &lt;反射&gt;机制</p>
<ol>
<li>Class 类： 代表一个目标类。</li>
<li>Field 类： 代表目标类的成员变量。</li>
<li>Method 类： 代表目标类的方法。</li>
<li>Constructor 类： 代表目标类的构造方法。</li>
<li>Array 类： 提供了动态创建数组，以及访问数组的元素的静态方法。</li>
</ol>
<h4 id="Class-类"><a href="#Class-类" class="headerlink" title="Class 类"></a>Class 类</h4><p>​    在程序运行期间，Java运行时系统始终为所有的对象维护一个被称为运行时的类型表示。这个信息跟踪着每个对象所属的类。虚拟机利用运行时类型信息选择相应的方法执行。</p>
<p>​    然而，可以通过专门的Java类访问这些信息。保存这些信息的类被成为Class，这个名字很容易让人混淆。Object 类中的getClass() 方法将返回一个Class类型的实例。</p>
<p>获取Class对象的三种方法</p>
<ul>
<li>如果类在一个包里，包的名字也作为做类名的一部分。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Random generator = <span class="keyword">new</span> Random();</div><div class="line">Class cl = generator.getClass();</div><div class="line">System.out.println(cl.getName());<span class="comment">//java.util.Random</span></div></pre></td></tr></table></figure>
<ul>
<li><p>如果类名保存字符串中，并可在运行时该变，即可使用这种方法。forName() 方法会爆<strong>ClassNotFoundException</strong> 异常，所以需要进行异常处理。</p>
<p> Class.forName() 内部通过反射API根据目标类名将类<strong>手动加载</strong>到内存中，称为<strong>类加载器加载方法</strong>。加载过程中会把目标类的static方法，变量，代码块加载到JVM，<strong>注意此时尚未创建对象实例</strong></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String className = <span class="string">"java.util.Random"</span>;</div><div class="line">Class cl = <span class="class"><span class="keyword">class</span>.<span class="title">forName</span>(<span class="title">className</span>)</span>;</div></pre></td></tr></table></figure>
<ul>
<li>如果T是任意的Java类型（或void 关键字），T.class 将代表匹配的类对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Class cl = Random.class;</div></pre></td></tr></table></figure>
<h4 id="获取构造器–Constructor-类"><a href="#获取构造器–Constructor-类" class="headerlink" title="获取构造器–Constructor 类"></a>获取构造器–Constructor 类</h4><ul>
<li><code>Constructor[] getConstructors()</code>：获得<strong>所有public</strong>构造器；</li>
<li><code>Constructor[] getDeclaredConstructors()</code>：获得<strong>所有访问权限</strong>的构造器</li>
<li><code>Constructor getConstructor(Class[] params)</code>：根据指定参数获得对应构造器；</li>
<li><code>Constructor getDeclaredConstructor(Class[] params)</code>：根据指定参数获得对应构造器；</li>
</ul>
<h4 id="获得方法–Method-类"><a href="#获得方法–Method-类" class="headerlink" title="获得方法–Method 类"></a>获得方法–Method 类</h4><ul>
<li><code>Method[] getMethods()</code>：获得<strong>所有public</strong>方法；</li>
<li><code>Method[] getDeclaredMethods()</code>：获得<strong>所有访问权限</strong>的方法；</li>
<li><code>Method getMethod(String name, Class[] params)</code>：根据方法签名获取类自身对应<strong>public方法</strong>，或者从基类继承和接口实现的对应<strong>public方法</strong>；</li>
<li><code>Method getDeclaredMethod(String name, Class[] params)</code>：根据方法签名获得对应的<strong>类自身声明方法</strong>，<strong>访问权限不限</strong>；</li>
</ul>
<h4 id="获得变量–Field-类"><a href="#获得变量–Field-类" class="headerlink" title="获得变量–Field 类"></a>获得变量–Field 类</h4><ul>
<li><code>Field[] getFields()</code>：获得类中<strong>所有public</strong>变量</li>
<li><code>Field[] getDeclaredFields()</code>：获得类中<strong>所有访问权限</strong>变量</li>
<li><code>Field getField(String name)</code>：根据变量名得到对应的public变量</li>
<li><code>Field getDeclaredField(String name)</code>：根据变量名获得对应的变量，<strong>访问权限不限</strong>；</li>
</ul>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>我们来个例子加深一下印象。</p>
<h4 id="打印一个类的所有构造函数"><a href="#打印一个类的所有构造函数" class="headerlink" title="打印一个类的所有构造函数"></a>打印一个类的所有构造函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printConstructors</span><span class="params">(Class cl)</span></span></div><div class="line"><span class="function">   </span>&#123;</div><div class="line">       <span class="comment">//返回包含Constructor 对象的数组，其中包含了Class对象的所有构造器</span></div><div class="line">       Constructor[] constructors = cl.getDeclaredConstructors();</div><div class="line"></div><div class="line">       <span class="keyword">for</span> (Constructor c: constructors) &#123;</div><div class="line">           <span class="comment">//String getName()</span></div><div class="line">           <span class="comment">//返回一个用于描述构造器、方法或域名的字符串</span></div><div class="line">           String name = c.getName();</div><div class="line">           System.out.print(<span class="string">"    "</span>);</div><div class="line">           String modifiers = Modifier.toString(c.getModifiers());</div><div class="line">           <span class="keyword">if</span> (modifiers.length()&gt;<span class="number">0</span>)</div><div class="line">               System.out.print(modifiers+ <span class="string">"  "</span>);</div><div class="line">           System.out.print(name+<span class="string">"("</span>);</div><div class="line">           <span class="comment">//Class[] getParameterTypes() (在Constructor 和 Method 类中)</span></div><div class="line">           <span class="comment">//返回一个用于描述参数类型的Class对象数组</span></div><div class="line">           printParameterType(c.getParameterTypes());</div><div class="line">           System.out.println(<span class="string">");"</span>);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h4 id="打印一个类的所有方法"><a href="#打印一个类的所有方法" class="headerlink" title="打印一个类的所有方法"></a>打印一个类的所有方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMethods</span><span class="params">(Class cl)</span></span></div><div class="line"><span class="function">   </span>&#123;</div><div class="line">       <span class="comment">//返回包含Method 对象的数组，返回这个类或接口的全部方法，但不包括由超类继承了的方法</span></div><div class="line">       Method[] methods = cl.getDeclaredMethods();</div><div class="line">       <span class="keyword">for</span> (Method m:methods) &#123;</div><div class="line">           <span class="comment">//Class getReturnType() (在 Method 类中)</span></div><div class="line">           <span class="comment">//返回一个用于描述返回类型的Class对象</span></div><div class="line">           Class retType = m.getReturnType();</div><div class="line">           String name = m.getName();</div><div class="line"></div><div class="line">           System.out.print(<span class="string">"    "</span>);</div><div class="line">           <span class="comment">//打印修饰符、返回类型和方法名称</span></div><div class="line">           String modifiers =Modifier.toString(m.getModifiers());</div><div class="line">           <span class="keyword">if</span> (modifiers.length()&gt;<span class="number">0</span>)</div><div class="line">               System.out.print(modifiers+<span class="string">" "</span>);</div><div class="line">           System.out.print(retType.getName()+<span class="string">" "</span>+ name + <span class="string">"("</span>);</div><div class="line"></div><div class="line">           printParameterType(m.getParameterTypes());</div><div class="line">           System.out.println(<span class="string">");"</span>);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h4 id="打印一个类的所有字段"><a href="#打印一个类的所有字段" class="headerlink" title="打印一个类的所有字段"></a>打印一个类的所有字段</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printFields</span><span class="params">(Class cl)</span></span></div><div class="line"><span class="function">   </span>&#123;</div><div class="line">       <span class="comment">//Field[] getDeclaredFields()</span></div><div class="line">       <span class="comment">//返回包含Field 对象的数组，这些对象记录了这个类的全部域</span></div><div class="line">       Field[] fields = cl.getDeclaredFields();</div><div class="line"></div><div class="line">       <span class="keyword">for</span> (Field f : fields)&#123;</div><div class="line">           Class type = f.getType();</div><div class="line">           String name = f.getName();</div><div class="line">           System.out.print(<span class="string">"    "</span>);</div><div class="line">           String modifiers = Modifier.toString(f.getModifiers());</div><div class="line">           <span class="keyword">if</span> (modifiers.length()&gt;<span class="number">0</span>)</div><div class="line">               System.out.print(modifiers+<span class="string">"  "</span>);</div><div class="line">           System.out.println(type.getName()+<span class="string">" "</span>+ name+ <span class="string">";"</span>);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h4 id="打印方法的参数类型"><a href="#打印方法的参数类型" class="headerlink" title="打印方法的参数类型"></a>打印方法的参数类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printParameterType</span><span class="params">(Class[] paramTypes)</span></span></div><div class="line"><span class="function">   </span>&#123;</div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;paramTypes.length;j++) &#123;</div><div class="line">           <span class="keyword">if</span> (j&gt;<span class="number">0</span>)</div><div class="line">               System.out.print(<span class="string">", "</span>);</div><div class="line">           System.out.print(paramTypes[j].getName());</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line"><span class="function">   </span>&#123;</div><div class="line">       String name;</div><div class="line">       <span class="keyword">if</span> (args.length&gt;<span class="number">0</span>)</div><div class="line">           name = args[<span class="number">0</span>];</div><div class="line">       <span class="keyword">else</span> &#123;</div><div class="line">           Scanner in = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">           System.out.println(<span class="string">"Enter class name(e.g java.util.Date): "</span>);</div><div class="line">           name = in.next();</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           <span class="comment">//print class name and superclass name (if != object)</span></div><div class="line">           <span class="comment">//调用Class 的静态方法 forName 获得类名对应的Class 对象</span></div><div class="line">           Class cl = Class.forName(name);</div><div class="line">           <span class="comment">//获取父类所对应的Class 对象</span></div><div class="line">           Class supercl = cl.getSuperclass();</div><div class="line">           <span class="comment">//返回对应modifiers 中位设置的修饰符的字符串表示</span></div><div class="line">           String modifiers = Modifier.toString(cl.getModifiers());</div><div class="line"></div><div class="line">           <span class="keyword">if</span> (modifiers.length()&gt;<span class="number">0</span>)</div><div class="line">               System.out.print(modifiers+<span class="string">"  "</span>);</div><div class="line">           System.out.print(<span class="string">"class "</span>+ name);</div><div class="line">           <span class="comment">//判断是否有继承父类</span></div><div class="line">           <span class="keyword">if</span> (supercl != <span class="keyword">null</span>  &amp;&amp; supercl != Object.class)</div><div class="line">               System.out.print(<span class="string">"  extends "</span>+ supercl.getName());</div><div class="line"></div><div class="line">           System.out.print(<span class="string">"\n&#123;\n"</span>);</div><div class="line">           printConstructors(cl);</div><div class="line">           System.out.println();</div><div class="line">           printMethods(cl);</div><div class="line">           System.out.println();</div><div class="line">           printFields(cl);</div><div class="line">           System.out.println(<span class="string">"&#125;"</span>);</div><div class="line"></div><div class="line"></div><div class="line">       &#125;<span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</div><div class="line">           ex.printStackTrace();</div><div class="line">       &#125;</div><div class="line">       System.exit(<span class="number">0</span>);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>   <a href="https://book.douban.com/subject/3146174/" target="_blank" rel="external">JAVA核心技术（卷1）原书第10版</a></p>
<p>   <a href="https://segmentfault.com/a/1190000009016560" target="_blank" rel="external">反射笔记</a></p>
]]></content>
      
        <categories>
            
            <category> JAVA </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[机器学习之识别验证码]]></title>
      <url>/php/Tesseract/</url>
      <content type="html"><![CDATA[<h3 id="下载-tesseract-ocr"><a href="#下载-tesseract-ocr" class="headerlink" title="下载 tesseract_ocr"></a>下载 tesseract_ocr</h3><h4 id="使用composer下载，tesseract-ocr"><a href="#使用composer下载，tesseract-ocr" class="headerlink" title="使用composer下载，tesseract_ocr"></a>使用composer下载，<a href="https://github.com/thiagoalessio/tesseract-ocr-for-php" target="_blank" rel="external">tesseract_ocr</a></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ composer require thiagoalessio/tesseract_ocr</div></pre></td></tr></table></figure>
<h4 id="ocr-测试"><a href="#ocr-测试" class="headerlink" title="ocr 测试"></a>ocr 测试</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require_once</span> <span class="string">'./vendor/autoload.php'</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">thiagoalessio</span>\<span class="title">TesseractOCR</span>\<span class="title">TesseractOCR</span>;</div><div class="line"></div><div class="line"><span class="keyword">echo</span> (<span class="keyword">new</span> TesseractOCR(<span class="string">'./1.jpg'</span>))</div><div class="line">    -&gt;lang(<span class="string">'eng'</span>)</div><div class="line">    -&gt;run();</div></pre></td></tr></table></figure>
<h3 id="训练样本数据"><a href="#训练样本数据" class="headerlink" title="训练样本数据"></a>训练样本数据</h3><h4 id="安装-Tesseract"><a href="#安装-Tesseract" class="headerlink" title="安装 Tesseract"></a>安装 Tesseract</h4><p>笔者这里是直接自动安装，没选择编译安装 </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt install tesseract-ocr</div></pre></td></tr></table></figure>
<h4 id="下载图片"><a href="#下载图片" class="headerlink" title="下载图片"></a>下载图片</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPicture</span><span class="params">($uri)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;<span class="number">100</span>;$i++) &#123;</div><div class="line">        $img = file_get_contents($uri);</div><div class="line">        $filename = <span class="string">'./test/'</span>.$i.<span class="string">'.gif'</span>;</div><div class="line">        file_put_contents($filename,$img);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下载之后有点小问题，因为笔者电脑少了一个gif库，后面处理的时候总是有点问题。所以我用软件将 <strong>gif</strong> 转成了 <strong>png</strong> 格式.</p>
<h4 id="安装-jTessBoxEditor"><a href="#安装-jTessBoxEditor" class="headerlink" title="安装 jTessBoxEditor"></a>安装 jTessBoxEditor</h4><ol>
<li><p><a href="https://sourceforge.net/projects/vietocr/files/jTessBoxEditor/" target="_blank" rel="external">下载地址</a> 笔者下载的是 <a href="https://sourceforge.net/projects/vietocr/files/jTessBoxEditor/jTessBoxEditor-2.0-Beta.zip/download" target="_blank" rel="external">jTessBoxEditor-2.0-Beta.zip</a></p>
</li>
<li><p>解压   </p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ unzip jTessBoxEditor-2.0-Beta.zip</div></pre></td></tr></table></figure>
<ol>
<li>运行</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ java -Xms128m -Xmx1024m -jar jTessBoxEditor.jar</div></pre></td></tr></table></figure>
<p><img src="/images/jTessBoxEditor.png" alt="jTessBoxEditor"></p>
<h4 id="图片转换成-tiff-格式"><a href="#图片转换成-tiff-格式" class="headerlink" title="图片转换成 tiff 格式"></a>图片转换成 tiff 格式</h4><p>因为jTessBoxEditor只能处理.tiff后缀的文件，因此我们需要将验证码图片转化为.tiff后缀，这里我们使用ImageMagick的convert工具进行转化，首先安装ImageMagick：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install imagemagick</div></pre></td></tr></table></figure>
<p>shell 脚本批量转换当前目录下的图片</p>
<p>创建 tran.sh 文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim tran.sh</div></pre></td></tr></table></figure>
<p>tran.sh 文件内容</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">~/bin/sh</span></div><div class="line">for file in `ls *.jpg`</div><div class="line">    do</div><div class="line">        name=$&#123;file%.*&#125;</div><div class="line">        convert $file "../tiff/"$name".tiff"</div><div class="line">    done</div></pre></td></tr></table></figure>
<p>图片转换</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./tran.sh</div></pre></td></tr></table></figure>
<h4 id="将-tiff-文件合并成-tif-文件"><a href="#将-tiff-文件合并成-tif-文件" class="headerlink" title="将 .tiff 文件合并成 .tif 文件"></a>将 .tiff 文件合并成 .tif 文件</h4><p>打开 <strong>jTessBoxEditor</strong> ，点击界面上的Tools/Merge TIFF，将之前生成的 <strong>.tiff</strong> 文件合并成一个 <strong>.tif</strong>文件</p>
<p><strong>官方定义 tif 文件的命名格式为：[lang].[fontname].exp[num].tif</strong></p>
<p><img src="/images/marge.png" alt="marge"></p>
<p><img src="/images/rename.png" alt="rename"></p>
<h4 id="生成-box-文件"><a href="#生成-box-文件" class="headerlink" title="生成 .box 文件"></a>生成 .box 文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ tesseract eng.test.exp0.tif eng.test.exp0 -l eng -psm 7 batch.nochop makebox</div></pre></td></tr></table></figure>
<h4 id="使用jTessBoxEditor校正字符"><a href="#使用jTessBoxEditor校正字符" class="headerlink" title="使用jTessBoxEditor校正字符"></a>使用jTessBoxEditor校正字符</h4><p>打开刚才生成的eng.test.exp0.tif 文件，在左侧的Char列输入正确的值，调整x，y，w，h的值。可选择工具栏上的merge 和 split 对结果进行合并和拆分。点击下方中间的翻页查看下一张验证码。</p>
<p><img src="/images/correcting.png" alt="correcting"></p>
<h3 id="自制语言库"><a href="#自制语言库" class="headerlink" title="自制语言库"></a>自制语言库</h3><h4 id="定义字体特征文件"><a href="#定义字体特征文件" class="headerlink" title="定义字体特征文件"></a>定义字体特征文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> <span class="built_in">test</span> 0 0 0 0 0 &gt; font_properties</div></pre></td></tr></table></figure>
<p> 语法： fontname italic bold fixed serif fraktur</p>
<p><strong>fontname为字体名称，italic为斜体，bold为黑体字，fixed为默认字体，serif为衬线字体，fraktur德文黑字体，1和0代表有和无，精细区分时可使用。</strong></p>
<h4 id="生成字符特征文件"><a href="#生成字符特征文件" class="headerlink" title="生成字符特征文件"></a>生成字符特征文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ tesseract eng.test.exp0.tif eng.test.exp0 -l eng -psm 7 nobatch box.train</div></pre></td></tr></table></figure>
<h4 id="产生字符集"><a href="#产生字符集" class="headerlink" title="产生字符集"></a>产生字符集</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">unicharset_extractor eng.test.exp0.box</div></pre></td></tr></table></figure>
<h4 id="生成shapetable"><a href="#生成shapetable" class="headerlink" title="生成shapetable"></a>生成shapetable</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ shapeclustering -F font_properties -U unicharset -O eng.test.exp0 eng.test.exp0.tr</div></pre></td></tr></table></figure>
<h4 id="生成聚集字符特征文件"><a href="#生成聚集字符特征文件" class="headerlink" title="生成聚集字符特征文件"></a>生成聚集字符特征文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mftraining -F font_properties -U unicharset -O eng.test.exp0 eng.test.exp0.tr</div></pre></td></tr></table></figure>
<h4 id="生成字符形状正常变化特征文件normproto"><a href="#生成字符形状正常变化特征文件normproto" class="headerlink" title="生成字符形状正常变化特征文件normproto"></a>生成字符形状正常变化特征文件normproto</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> cntraining eng.test.exp0.tr</div><div class="line">$ combine_tessdata <span class="built_in">test</span>.</div></pre></td></tr></table></figure>
<h4 id="给inttemp-normproto-pffmtable-shapetable-unicharset-添加前缀-“test-”。"><a href="#给inttemp-normproto-pffmtable-shapetable-unicharset-添加前缀-“test-”。" class="headerlink" title="给inttemp,normproto,pffmtable,shapetable,unicharset 添加前缀 “test.”。"></a>给inttemp,normproto,pffmtable,shapetable,unicharset 添加前缀 “test.”。</h4><h4 id="生成语言库"><a href="#生成语言库" class="headerlink" title="生成语言库"></a>生成语言库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$ combine_tessdata <span class="built_in">test</span>.</div><div class="line">Combining tessdata files</div><div class="line">TessdataManager combined tesseract data files.</div><div class="line">Offset <span class="keyword">for</span> <span class="built_in">type</span>  0 (test.config                ) is -1</div><div class="line">Offset <span class="keyword">for</span> <span class="built_in">type</span>  1 (test.unicharset            ) is 140</div><div class="line">Offset <span class="keyword">for</span> <span class="built_in">type</span>  2 (test.unicharambigs         ) is -1</div><div class="line">Offset <span class="keyword">for</span> <span class="built_in">type</span>  3 (test.inttemp               ) is 891</div><div class="line">Offset <span class="keyword">for</span> <span class="built_in">type</span>  4 (test.pffmtable             ) is 137813</div><div class="line">Offset <span class="keyword">for</span> <span class="built_in">type</span>  5 (test.normproto             ) is 137935</div><div class="line">Offset <span class="keyword">for</span> <span class="built_in">type</span>  6 (test.punc-dawg             ) is -1</div><div class="line">Offset <span class="keyword">for</span> <span class="built_in">type</span>  7 (test.word-dawg             ) is -1</div><div class="line">Offset <span class="keyword">for</span> <span class="built_in">type</span>  8 (test.number-dawg           ) is -1</div><div class="line">Offset <span class="keyword">for</span> <span class="built_in">type</span>  9 (test.freq-dawg             ) is -1</div><div class="line">Offset <span class="keyword">for</span> <span class="built_in">type</span> 10 (test.fixed-length-dawgs    ) is -1</div><div class="line">Offset <span class="keyword">for</span> <span class="built_in">type</span> 11 (test.cube-unicharset       ) is -1</div><div class="line">Offset <span class="keyword">for</span> <span class="built_in">type</span> 12 (test.cube-word-dawg        ) is -1</div><div class="line">Offset <span class="keyword">for</span> <span class="built_in">type</span> 13 (test.shapetable            ) is 139557</div><div class="line">Offset <span class="keyword">for</span> <span class="built_in">type</span> 14 (test.bigram-dawg           ) is -1</div><div class="line">Offset <span class="keyword">for</span> <span class="built_in">type</span> 15 (test.unambig-dawg          ) is -1</div><div class="line">Offset <span class="keyword">for</span> <span class="built_in">type</span> 16 (test.params-model          ) is -1</div><div class="line">Output test.traineddata created successfully.</div></pre></td></tr></table></figure>
<h4 id="语言库存到tesseract中"><a href="#语言库存到tesseract中" class="headerlink" title="语言库存到tesseract中"></a>语言库存到tesseract中</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo cp test.traineddata /usr/share/tesseract-ocr/tessdata/</div></pre></td></tr></table></figure>
<h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; <span class="number">100</span>; $i++) &#123;</div><div class="line">  <span class="keyword">echo</span> $i.<span class="string">":"</span>.(<span class="keyword">new</span> TesseractOCR(<span class="string">'./test/'</span>.$i.<span class="string">'.jpg'</span>))</div><div class="line">         -&gt;lang(<span class="string">'test'</span>)</div><div class="line">         -&gt;run();</div><div class="line">  <span class="keyword">echo</span> <span class="string">'\r'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; <span class="number">100</span>; $i++) &#123;</div><div class="line">  <span class="keyword">echo</span> $i.<span class="string">":"</span>.(<span class="keyword">new</span> TesseractOCR(<span class="string">'./test/'</span>.$i.<span class="string">'.jpg'</span>))</div><div class="line">         -&gt;lang(<span class="string">'eng'</span>)</div><div class="line">         -&gt;run();</div><div class="line">  <span class="keyword">echo</span> <span class="string">'\r'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>笔者用100张照片去对比，结果如下</p>
<p><img src="/images/contrast.png" alt="contrast"><br>因为eng是还有匹配字母，所有速度和正确率方面有所影响。test我主要是校正数字，所以速度上相对有优势，加上训练数据不大，正确率不是很高。</p>
<table>
<thead>
<tr>
<th>语言库</th>
<th>eng</th>
<th>test</th>
</tr>
</thead>
<tbody>
<tr>
<td>识别率</td>
<td>52%</td>
<td>69%</td>
</tr>
</tbody>
</table>
<p><strong>Tesseract</strong> 识别的图片如果太脏，需要清洗一下，否则极影响识别率。</p>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[软考爬虫]]></title>
      <url>/php/Software/</url>
      <content type="html"><![CDATA[<p>最近和同学在一起准备报考  <strong>计算机技术与软件专业技术资格（水平）考试</strong>，不过因为报名时间还没出，所以一直得关注网站是否已经可以报考。</p>
<p>刚好又在弄php的爬虫，所以就顺手做一个爬虫，再搭配一下Twilio做一个预警通知，就不用关注网站了，这样就轻松了很多。<br><a id="more"></a></p>
<p>注意：这里爬虫访问的是 <a href="http://www.gdrsks.gov.cn/" target="_blank" rel="external">广东人事考试网</a></p>
<p>使用工具：<a href="https://doc.querylist.cc/" target="_blank" rel="external">QueryList</a>   <a href="https://www.twilio.com" target="_blank" rel="external">Twilio</a></p>
<p>先放一张成品图. 这里还没出2018的，所以用2017的测试<br><img src="/images/Achievements.jpg" alt="Achievements"></p>
<h2 id="Twilio"><a href="#Twilio" class="headerlink" title="Twilio"></a>Twilio</h2><p>Twilio是一个做成开放插件的电话跟踪服务（call-tracking service）。美国当地时间2016年6月23日，云通讯公司Twilio在纽约证券交易所上市（来自于百度百科）。Twilio官网从国内访问的时候，可能会因为一些你懂的原因而导致无法访问，这时你就得学习一下怎么科学上网了。</p>
<h2 id="QueryList"><a href="#QueryList" class="headerlink" title="QueryList"></a>QueryList</h2><p>QueryList是一个基于phpQuery的PHP通用列表采集类,得益于phpQuery，让使用QueryList几乎没有任何学习成本，只要会CSS3选择器就可以轻松使用QueryList了，它让PHP做采集像jQuery选择元素一样简单。</p>
<h2 id="Twilio注册"><a href="#Twilio注册" class="headerlink" title="Twilio注册"></a>Twilio注册</h2><p>注册方法请移步 <a href="https://cuiqingcai.com/5696.html" target="_blank" rel="external">崔庆才</a> 大神的博客，这里就不重复了。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>因为是PHP版本的，所以用composer进行安装</p>
<ul>
<li><p>Twilio     PHP &gt;= 5.3</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer require twilio/sdk</div></pre></td></tr></table></figure>
</li>
<li><p>QueryList   PHP &gt;= 7.0</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer require jaeger/querylist</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Twilio-代码"><a href="#Twilio-代码" class="headerlink" title="Twilio 代码"></a>Twilio 代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">require_once &apos;./vendor/autoload.php&apos;;</div><div class="line">use Twilio\Rest\Client;</div><div class="line">function SendSMS($body)</div><div class="line">&#123;</div><div class="line">    $account_sid = &quot;your account sid&quot;;</div><div class="line">    $auth_token = &quot;your token&quot;;</div><div class="line"></div><div class="line">    $client = new Client($account_sid, $auth_token);</div><div class="line"></div><div class="line">    $messages = $client-&gt;messages-&gt;create(</div><div class="line">        &quot;+接收者的号码&quot;,</div><div class="line">        array(</div><div class="line">            &apos;from&apos; =&gt; &apos;+twilio给你的号码&apos;,</div><div class="line">            &apos;body&apos; =&gt; $body</div><div class="line">        )</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="QueryList-代码"><a href="#QueryList-代码" class="headerlink" title="QueryList 代码"></a>QueryList 代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">require_once &apos;./vendor/autoload.php&apos;;</div><div class="line">use QL\QueryList;</div><div class="line">function getHtmlData($uri, $rules, $range)</div><div class="line">&#123;</div><div class="line">    $html = QueryList::get($uri)-&gt;getHtml();</div><div class="line">    $data = QueryList::html($html)-&gt;rules($rules)-&gt;range($range)</div><div class="line">                                  -&gt;query()-&gt;getData();</div><div class="line">    return $data-&gt;all();</div><div class="line">&#125;</div><div class="line">function send($uri)</div><div class="line">&#123;</div><div class="line">    $rules = array(</div><div class="line">        &apos;content&apos; =&gt; array(&apos;p&apos;,&apos;text&apos;),</div><div class="line">        &apos;link&apos;    =&gt; array(&apos;a&apos;,&apos;href&apos;)</div><div class="line">    );</div><div class="line">    $range = &apos;#fontzoom&apos;;</div><div class="line">    $dataArray = getHtmlData($uri, $rules, $range);</div><div class="line">    $time = explode(&apos;：&apos;,explode(&apos;。&apos;,$dataArray[0][&apos;content&apos;])[0])[2];</div><div class="line">    $body = $time.&apos;。报名入口：&apos;.$dataArray[0][&apos;link&apos;];</div><div class="line">    SendSMS($body);</div><div class="line">&#125;</div><div class="line">$uri = &quot;http://www.gdrsks.gov.cn/HREducation/ExamList.aspx?ecid=2&amp;nodeid=1&amp;ekid=19&quot;;</div><div class="line">$rules = array(</div><div class="line">    &apos;date&apos;      =&gt;  array(&apos;.date&apos;,&apos;text&apos;),</div><div class="line">    &apos;content&apos;   =&gt;  array(&apos;.tit&apos;,&apos;text&apos;),</div><div class="line">    &apos;link&apos;      =&gt;  array(&apos;.tit&apos;,&apos;href&apos;)</div><div class="line">);</div><div class="line">$range = &apos;#mainContent&gt;div.wBd&gt;ul&gt;li&apos;;</div><div class="line">$data = getHtmlData($uri, $rules, $range);</div><div class="line">foreach ($data as $value) &#123;</div><div class="line">    $array = explode(&apos;-&apos;, $value[&apos;date&apos;]);</div><div class="line">    if (count($array) == 1)</div><div class="line">        continue;</div><div class="line">    if ($array[0] == &apos;2018&apos;) &#123;</div><div class="line">        $uri = &apos;http://www.gdrsks.gov.cn&apos;.$value[&apos;link&apos;];</div><div class="line">        $uri = explode(&apos;&amp;&apos;,$uri)[0];</div><div class="line">        send($uri);</div><div class="line">        break;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">crontab -e</div><div class="line">30 7 * * * /usr/bin/php your_file_path</div><div class="line">systemctl restart cron</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> crawler </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mysql和MariaDB 笔记]]></title>
      <url>/MySQL/Mysql/</url>
      <content type="html"><![CDATA[<p><strong>含有空用户名加上localhost的组合，即任何用户名都可从localhost登陆</strong></p>
<p><strong>设置初始密码</strong></p>
<blockquote>
<p>mysqladmin -u root -p flush-privileges password “new_pwd”;</p>
</blockquote>
<p>mysqladmin 必须软链接到PATH中</p>
<blockquote>
<p>Linux中：/usr/local/mysql/bin/mysqladmin</p>
</blockquote>
<p><strong>查看用户</strong></p>
<blockquote>
<p>mysql -u root -p -e “SELECT User,Host FROM mysql.user;”;</p>
</blockquote>
<p><strong>删除组合</strong></p>
<blockquote>
<p>mysql -u root -p -e “drop USER ‘root’@’%’;”</p>
</blockquote>
<p><strong>设置密码</strong></p>
<blockquote>
<p>mysql -u root -p -e “set password for ‘root’@’127.0.0.1’ password(‘new_pwd’);”</p>
</blockquote>
<p><strong>创建用户</strong></p>
<blockquote>
<p>mysql -u root -p -e “grant usage on <em>.</em> to ‘username’@’localhost’ identified by ‘password’;”</p>
</blockquote>
<p><strong>授权</strong></p>
<blockquote>
<p>mysql -u root -p -e “grant selecr/all on <em>.</em> to ‘username’@’localhost’;”</p>
</blockquote>
<p><strong>看表结构</strong></p>
<blockquote>
<p>describe tablename;<br>show create tablename;</p>
</blockquote>
<p><strong>\G表示数据以行显示</strong></p>
<p><strong>创建数据库时指定字符集</strong></p>
<blockquote>
<p>create database databasename<br>character set utf8</p>
</blockquote>
<p><strong>创建数据库时指定默认校对方式</strong></p>
<blockquote>
<p>rollate utf8_general_ci;</p>
</blockquote>
<p><strong>备份    \表示告诉shell下一行还有 path表示路径</strong></p>
<blockquote>
<p>mysqldump –user=’username’ -p \<br>databasename [tablename] &gt; path</p>
</blockquote>
<p><strong>恢复备份</strong></p>
<blockquote>
<p>mysql –user=’username’ -p \<br>databasename [tablename] &lt; path</p>
</blockquote>
<p><strong>复制表结构</strong></p>
<blockquote>
<p>create table tablename like another_tablename;</p>
</blockquote>
<p><strong>复制表数据</strong></p>
<blockquote>
<p>insert into tablename select * from another_tablename;</p>
</blockquote>
<p><strong>修改表</strong></p>
<blockquote>
<p>alter table tablename changes</p>
</blockquote>
<p><strong>增加列</strong></p>
<blockquote>
<p>alter table tablename add column 列名 类型 索引 [after 列];</p>
</blockquote>
<p><strong>删除列</strong></p>
<blockquote>
<p>alter table tablename drop column 列名;</p>
</blockquote>
<p><strong>修改列名</strong></p>
<blockquote>
<p>alter table tablename change column old_column new_column type;</p>
</blockquote>
<p><strong>default b ‘默认值’ 表示设置默认值</strong></p>
<p><strong>修改/删除默认值</strong></p>
<blockquote>
<p>alter table tablename<br>alter columnname set/drop default [];</p>
</blockquote>
<p><strong>查看表的auto_increment值</strong></p>
<blockquote>
<p>select auto_increment from information_schema.tables where table_name = ‘tablename’;</p>
</blockquote>
<p><strong>修改auto_increment值</strong></p>
<blockquote>
<p>alter table tablename auto_increment = X;</p>
</blockquote>
<p><strong>修改/移动表</strong></p>
<blockquote>
<p>rename table tablename to tablename;</p>
</blockquote>
<p><strong>更改数据排列</strong></p>
<blockquote>
<p>alter table tablename<br>order by ..;</p>
</blockquote>
<p><strong>在select 之前 加上explain 可查mysql根据什么 [索引] 查找数据</strong></p>
<p><strong>增加索引</strong></p>
<blockquote>
<p>alter table tablename<br>add index indexname (column_name,[column_name]);</p>
</blockquote>
<p><strong>模糊搜索列名</strong></p>
<blockquote>
<p>show columns from tablename like ‘%xx%’;</p>
</blockquote>
<p><strong>插入数据(忽略错误)</strong></p>
<blockquote>
<p>insert ignore into tablename select … from tablename;</p>
</blockquote>
<p><strong>显示错误</strong></p>
<blockquote>
<p>show warnings;</p>
</blockquote>
<p><strong>替换数据(replace)</strong></p>
<blockquote>
<p>replace into tablename(column..) values(..) </p>
<p>replacet 替换的时候，如果有unique索引，是先删除原有的列，在插入新列，若无指定值，会插入默认值，若无索引，则是新插入列 </p>
</blockquote>
<p><strong>数据插入的优先级(写在 insert 和 into 之间)</strong><br><strong>insert 优先于 select</strong></p>
<ol>
<li>降低insert的优先级 (low_priority)</li>
<li>延迟插入 (delayed)  MySQL5.5.6后不提倡用了</li>
<li>提升insert的优先级 (high_priority)</li>
</ol>
<p><strong>插入时处理重复数据</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">insert into tablename </div><div class="line">select .. from tablename ...</div><div class="line">on duplicate key </div><div class="line">update ...</div></pre></td></tr></table></figure></p>
<p><strong>查询</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">select */column from tablename </div><div class="line">where column [in / is null / = / like &apos;%/_x&apos; ]</div><div class="line">order by column asc/ desc</div><div class="line">limit start,end;</div></pre></td></tr></table></figure>
<blockquote>
<p>MySQL 先按where字句获取所有数据，并在幕后将结果存放于临时表，在按order by 排序，最后根据limit获取特定序列的数据</p>
</blockquote>
<p><strong>正则匹配</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select * from tablename </div><div class="line">where column regexp [binary] &apos;...&apos;;</div><div class="line">binary 表示区分大小写</div></pre></td></tr></table></figure></p>
<p><strong>更新语句 ,update单表时可用order by 和 limit</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">update tablename set column = .. </div><div class="line">where condition</div><div class="line">order by column</div><div class="line">limit  row_count;</div></pre></td></tr></table></figure></p>
<p><strong>删除语句 ,delete单表时可用order by 和 limit</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">delete from tablename </div><div class="line">where condition</div><div class="line">order by column</div><div class="line">limit  row_count;</div></pre></td></tr></table></figure></p>
<p><strong>连删 (using 声明连接方式)</strong></p>
<p><strong>using join方式</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">delete from table [, table]</div><div class="line">using table [,...]</div><div class="line">[where condition];</div><div class="line"></div><div class="line">example：</div><div class="line">delete from humans, prize_winners</div><div class="line">using humans left join prize_winners</div><div class="line">on humans.human_id = prize_winners.human_id</div><div class="line">where name_first = &apos;Elena&apos;</div><div class="line">and name_last = &apos;Bokova&apos;</div><div class="line">and email_address like &apos;%yahoo.com&apos;;</div></pre></td></tr></table></figure></p>
<p><strong>连表时两表有同列名</strong></p>
<p><strong>join using方式</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">select * from table</div><div class="line">join table </div><div class="line">using(column)</div><div class="line">where condition;</div></pre></td></tr></table></figure></p>
<p><strong>性能比较 使用benchmark()函数</strong></p>
<hr>
<h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><p><strong>拼接字符串 concat(column,what,column)</strong></p>
<p><strong>拼接字符串 concat_ws(what,column,column…)</strong></p>
<p><strong>判断NULL ifnull(column, default)</strong></p>
<p><strong>转换小写 lower() | lcase()</strong></p>
<p><strong>转换大写 upper() | ucase()</strong></p>
<p><strong>避免识别出错 quote() 单引号包围后输出，转移字符前加 \</strong></p>
<p><strong>去开头空格 ltrim()</strong></p>
<p><strong>去尾部空格 rtrim()</strong></p>
<p><strong>trim() 不止可以去除两段空格，还可以去除别的字符如：” trim(both ‘字符’ from column)</strong></p>
<p><strong>trim() 默认是both，去除一端可指定leading或者trailing</strong></p>
<p><strong>左端填充 lpad(str,len,padstr)</strong></p>
<p><strong>右端填充 rpad(str,len,padstr)</strong></p>
<p><strong>填充空格 space(N)</strong></p>
<p><strong> MySQL 是从1开始的，而不是0</strong></p>
<p><strong>左截取 left(str,len)</strong></p>
<p><strong>右截取 left(str,len) 从右往左数</strong></p>
<p><strong>截取字符 substring(str,pos,len) 或者 mid(str,pos,len)</strong></p>
<p><strong>截取元素 substring_index(str,delim,count)</strong></p>
<p><strong>locate(substr,column) 查找字串位置，返回字串出现的首位置</strong> </p>
<p><strong>查找字串 position(substr in coliumn)</strong></p>
<p><strong>判断 if(what, yes, no)</strong></p>
<p><strong>获取字符长度 char_length(str) | character_length(str)</strong></p>
<p><strong>获取位数 bit_length(str)</strong></p>
<p><strong>比较函数 strcmp(expr1,expr2) 一致返回0</strong></p>
<p><strong>FULLTEXT索引模糊搜索 match(column) against(str)</strong></p>
<p><strong>替换函数 insert(column,pos,len,newstr) 第三个参数表示多少个字符被替换</strong></p>
<p><strong>类型转换 cast(column AS type) | convert(column,type) | convert(column using utf8)</strong></p>
<p><strong>压缩字符串，安装MySQL需带上压缩库(zlib) compress(str)</strong></p>
<p><strong>解压缩   uncompress(column)</strong></p>
<h2 id="时间函数"><a href="#时间函数" class="headerlink" title="时间函数"></a>时间函数</h2><p><strong>当前日期和时间 now() | current_timestamp() | localtimestamp() | localtime()</strong></p>
<p><strong>暂停秒数 sleep(N)</strong></p>
<p><strong>获取自身被执行的时间点 systdate() 主要用于非常复杂的sql语句，或者存储过程和触发器之中</strong></p>
<p><strong>获取当前日期 curdate()</strong></p>
<p><strong>获取当前时间 curtime()</strong></p>
<p><strong>获取当前时间戳 unix_timestamp()</strong></p>
<p><strong>抽取日期 date(column)</strong></p>
<p><strong>抽取时间 time(column)</strong></p>
<p><strong>抽取年   year(column)</strong></p>
<p><strong>抽取月   month(column)</strong></p>
<p><strong>抽取日   day(column)</strong></p>
<p><strong>抽取小时 hour(column)</strong></p>
<p><strong>抽取分   minute(column)</strong></p>
<p><strong>抽取秒   second(column)</strong></p>
<p><strong>获取指定日期的月份 monthame()</strong></p>
<p><strong>获取指定日期的星期 dayame()</strong></p>
<p><strong>抽取函数 extract(unit FROM date)</strong></p>
<table>
<thead>
<tr>
<th>lntervar</th>
<th>返回格式</th>
</tr>
</thead>
<tbody>
<tr>
<td>day</td>
<td>dd</td>
</tr>
<tr>
<td>day_hour</td>
<td>‘dd hh’</td>
</tr>
<tr>
<td>day_microsecond</td>
<td>‘dd.nn’</td>
</tr>
<tr>
<td>day_minute</td>
<td>‘dd hh:mm’</td>
</tr>
<tr>
<td>day_second</td>
<td>‘dd hh:mm:ss’</td>
</tr>
<tr>
<td>hour</td>
<td>hh</td>
</tr>
<tr>
<td>hour_microsecond</td>
<td>‘hh.nn’</td>
</tr>
<tr>
<td>hour_minute</td>
<td>‘hh:mm’</td>
</tr>
<tr>
<td>hour_second</td>
<td>‘hh:mm:ss’</td>
</tr>
<tr>
<td>microsecond</td>
<td>nn</td>
</tr>
<tr>
<td>minute</td>
<td>mm</td>
</tr>
<tr>
<td>minute_microsecond</td>
<td>‘mm.nn’</td>
</tr>
<tr>
<td>minute_second</td>
<td>‘mm:ss’</td>
</tr>
<tr>
<td>month</td>
<td>mm</td>
</tr>
<tr>
<td>quarter</td>
<td>qq</td>
</tr>
<tr>
<td>second</td>
<td>ss</td>
</tr>
<tr>
<td>second_microsecond</td>
<td>‘ss.nn’</td>
</tr>
<tr>
<td>week</td>
<td>ww</td>
</tr>
<tr>
<td>year</td>
<td>yy</td>
</tr>
<tr>
<td>year_month</td>
<td>‘yy-mm’</td>
</tr>
</tbody>
</table>
<p><strong>格式化日期 date_format(date,format)</strong></p>
<p><strong>格式化时间 time_format(time,format)</strong></p>
<table>
<thead>
<tr>
<th>代码</th>
<th>描述</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>%a</td>
<td>简写的周几</td>
<td>(Sun…Sat)</td>
</tr>
<tr>
<td>%b</td>
<td>简写的月份名字</td>
<td>(Jan…Dec)</td>
</tr>
<tr>
<td>%c</td>
<td>月份(数字形式)</td>
<td>(1…12)</td>
</tr>
<tr>
<td>%d</td>
<td>一个月中的哪一天(数字形式)</td>
<td>(00…31)</td>
</tr>
<tr>
<td>%D</td>
<td>一个月中的哪一天(带有英文后缀)</td>
<td>(1st,2nd,3rd…)</td>
</tr>
<tr>
<td>%e</td>
<td>一个月中的哪一天(数字形式)</td>
<td>(0…31)</td>
</tr>
<tr>
<td>%f</td>
<td>毫秒(数字形式)</td>
<td>(000000…999999)</td>
</tr>
<tr>
<td>%h</td>
<td>小时</td>
<td>(01…12)</td>
</tr>
<tr>
<td>%H</td>
<td>小时</td>
<td>(00…23)</td>
</tr>
<tr>
<td>%i</td>
<td>分钟</td>
<td>(00…59)</td>
</tr>
<tr>
<td>%I</td>
<td>小时</td>
<td>(01…12)</td>
</tr>
<tr>
<td>%j</td>
<td>一年中的哪一天</td>
<td>(001…366)</td>
</tr>
<tr>
<td>%k</td>
<td>小时</td>
<td>(0…23)</td>
</tr>
<tr>
<td>%l</td>
<td>小时</td>
<td>(1…12)</td>
</tr>
<tr>
<td>%m</td>
<td>月份</td>
<td>(01….12)</td>
</tr>
<tr>
<td>%M</td>
<td>月份名字</td>
<td>(January….December)</td>
</tr>
<tr>
<td>%p</td>
<td>AM或者PM</td>
<td>AM or PM</td>
</tr>
<tr>
<td>%r</td>
<td>时间，12小时制</td>
<td>(hh:mm:ss[A</td>
<td>P]M)</td>
</tr>
<tr>
<td>%s</td>
<td>秒</td>
<td>(00…59)</td>
</tr>
<tr>
<td>%S</td>
<td>秒</td>
<td>(00…59)</td>
</tr>
<tr>
<td>%T</td>
<td>时间，24小时制</td>
<td>(hh:mm:ss)</td>
</tr>
<tr>
<td>%u</td>
<td>一年中的第几周(以周一为一周的第一天)</td>
<td>(0…52)</td>
</tr>
<tr>
<td>%U</td>
<td>一年中的第几周(以周日为一周的第一天)</td>
<td>(0…52)</td>
</tr>
<tr>
<td>%v</td>
<td>一年中的第几周(以周一为一周的第一天，与%x一起使用)</td>
<td>(1…53)</td>
</tr>
<tr>
<td>%V</td>
<td>一年中的第几周(以周日为一周的第一天，与%X一起使用)</td>
<td>(1…53)</td>
</tr>
<tr>
<td>%w</td>
<td>一周中的哪一天</td>
<td>(0=Sunday…6=Saturday)</td>
</tr>
<tr>
<td>%W</td>
<td>周几</td>
<td>(Sunday….Saturday)</td>
</tr>
<tr>
<td>%x</td>
<td>某一周所属的年份(以周一为一周的第一天,4位数字形式，与%v一起使用)</td>
<td>(yyyy)</td>
</tr>
<tr>
<td>%X</td>
<td>某一周所属的年份(以周日为一周的第一天,4位数字形式，与%V一起使用)</td>
<td>(yyyy)</td>
</tr>
<tr>
<td>%y</td>
<td>年份(两位数字形式)</td>
<td>(yy)</td>
</tr>
<tr>
<td>%Y</td>
<td>年份(四位数字形式)</td>
<td>(yyyy)</td>
</tr>
<tr>
<td>%%</td>
<td>字面的%%</td>
<td>‘%’</td>
</tr>
</tbody>
</table>
<p><strong>获取标准的日期格式 get_format({DATE|TIME|DATETIME}, {‘EUR’|’USA’|’JIS’|’ISO’|’INTERNAL’})</strong></p>
<ul>
<li>EUR 代表欧洲</li>
<li>USA 代表美国</li>
<li>JIS 代表日本工业标准</li>
<li>ISO 代表ISO 9075标准</li>
<li>INTERNAL 代表没有标点符号的时间格式</li>
</ul>
<p><strong>时区时间转换 convert_tz(datetime,from_tz,to_tz)</strong></p>
<p><strong>日期增加 date_add(date,interval expr unit)</strong></p>
<p><strong>日期缩减 date_sub(date,interval expr unit)</strong></p>
<p><strong>时间换算秒  time_to_sec(time)</strong></p>
<p><strong>秒换算时间 sec_to_time(seconds)</strong></p>
<p><strong>日期加减函数 period_add(P,N) 参数为字符串</strong></p>
<p><strong>日期比较 datediff(expr1,expr2)</strong></p>
<p><strong>日期比较 timediff(expr1,expr2)</strong></p>
<h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><p><strong>计算总数 count(expr1)</strong></p>
<p><strong>按组分 group by </strong></p>
<p><strong>求组分的同时求总数，可在group by 中加入 with rollup</strong></p>
<p><strong>求和 sum(expr)</strong></p>
<p><strong>求平均 avg([DISTINCT] expr)</strong></p>
<p><strong>求最大 max(expr)</strong></p>
<p><strong>求最小 min(expr)</strong></p>
<p><strong>组拼接 group_concat(expr)</strong></p>
<p><strong>四舍五入 round(X,D)</strong></p>
<p><strong>下舍入 floor(X)</strong></p>
<p><strong>上舍入 ceiling(X)</strong></p>
<p><strong>去掉小数 truncate(X,D)</strong></p>
<p><strong>绝对值 abs(X)</strong></p>
<p><strong>判断正负  sign(X)</strong></p>
<p><strong>设置用户自定义变量  set @name = expr;</strong></p>
<h2 id="数据库管理"><a href="#数据库管理" class="headerlink" title="数据库管理"></a>数据库管理</h2><p><strong>查看用户权限</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show grants for &apos;username&apos;;</div></pre></td></tr></table></figure></p>
<p>结果中的 <em>.</em> 是指授权使用所有数据库和所有表, ‘username’@’%’中主机是通配符 % ，无论何时都应该指定主机。</p>
<p><strong>删除用户账号 drop user ‘username’@’..’, 删除前先查看mysql数据库的user表</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select User,Host from mysql.user where User like &apos;%username%&apos;;</div></pre></td></tr></table></figure></p>
<p><strong>授权 grant privilege [(column…)] on database.table to ‘username’@’..’</strong></p>
<table>
<thead>
<tr>
<th>权限</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>all [privileges]</td>
<td>授予所有基本的权限，但不包括grant option</td>
</tr>
<tr>
<td>alter</td>
<td>允许使用alter table 语句，但得现有create和insert权限，如果想重命名一个表。还得现有drop权限，这里有一个安全隐患：用户可以通过对表改名来获得访问权</td>
</tr>
<tr>
<td>alter routine</td>
<td>允许用户账号更改或删除存储过程，即允许使用alter function、alter procedure、drop function和drop procedure语句</td>
</tr>
<tr>
<td>create</td>
<td>允许使用create table 语句。如果想定义索引，还需要index权限</td>
</tr>
<tr>
<td>create routine</td>
<td>允许用户账号创建存储过程，即允许使用create function 和 create procedure 语句。并且，用户账号对自己创建的过程拥有alter routine权限</td>
</tr>
<tr>
<td>create temporary tables</td>
<td>允许使用create temporary tables 语句</td>
</tr>
<tr>
<td>create user</td>
<td>允许用户账号执行以下用户账号管理语句：create user、raname user、revoke all privileges和drop user</td>
</tr>
<tr>
<td>create view</td>
<td>允许使用create view 语句</td>
</tr>
<tr>
<td>delete</td>
<td>允许使用delete语句</td>
</tr>
<tr>
<td>drop</td>
<td>允许使用drop table 和 truncate语句</td>
</tr>
<tr>
<td>event</td>
<td>允许用户账号为事件调度器创建事件，即允许使用create event、alter event 和 drop event 语句</td>
</tr>
<tr>
<td>execute</td>
<td>允许执行存储过程，即允许使用execute语句</td>
</tr>
<tr>
<td>file</td>
<td>允许使用select … into outfile 和 load data infile语句来导出数据到文件系统，或从文件系统导入数据。还有一个安全隐患。可通过secure_file_priv 变量来限制指定目录</td>
</tr>
<tr>
<td>index</td>
<td>允许使用create index 和 drop index 语句</td>
</tr>
<tr>
<td>insert</td>
<td>允许使用insert语句。这是执行analyze table、optimize table 和 repair table 语句的前提条件</td>
</tr>
<tr>
<td>lock tables</td>
<td>允许使用lock tables 语句，但用户必须先对表有select权限</td>
</tr>
<tr>
<td>process</td>
<td>允许使用show processlist和show endine语句</td>
</tr>
<tr>
<td>reload</td>
<td>允许使用flush 语句</td>
</tr>
<tr>
<td>replication client</td>
<td>允许用户查询主从服务器的状态信息，即允许使用show master status、show slave status 和 show binary logs语句</td>
</tr>
<tr>
<td>replication slave</td>
<td>进行从服务器复制时，需要此权限，它将允许读取主服务器的二进制日志事件</td>
</tr>
<tr>
<td>select</td>
<td>允许使用select 语句</td>
</tr>
<tr>
<td>show databases</td>
<td>允许使用show databases 语句来查看所有数据库，包括那些没有权限的数据库</td>
</tr>
<tr>
<td>show view</td>
<td>允许使用show create view 语句</td>
</tr>
<tr>
<td>shutdown</td>
<td>允许使用mysqladmin工具的shutdown选项</td>
</tr>
<tr>
<td>super</td>
<td>允许使用change master to、kill、purge binary logs、set global语句，以及mysqladmmin 工具的debug选项</td>
</tr>
<tr>
<td>trigger</td>
<td>允许用户账号创建或删除触发器，即允许使用create trigger 和 drop trigger 语句</td>
</tr>
<tr>
<td>update</td>
<td>允许使用update 语句</td>
</tr>
<tr>
<td>usage</td>
<td>可用于创建无权限的用户，或在不影响用户现有权限的情况下修改某某方面的属性</td>
</tr>
</tbody>
</table>
<p><strong>移除权限</strong></p>
<blockquote>
<p>revoke privileges on database.table from ‘username’@’..’;</p>
</blockquote>
<p><strong>获取会话标识  需process权限</strong></p>
<blockquote>
<p>show processlist;</p>
</blockquote>
<p><strong>结束会话 id为获取会话的id 需super权限</strong></p>
<blockquote>
<p>kill id;</p>
</blockquote>
<p><strong>强迫用户修改密码</strong></p>
<blockquote>
<p>alter user ‘username’@’localhost’ password expire;</p>
</blockquote>
<p><strong>修改密码</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">set password for &apos;username&apos;@&apos;localhost&apos; = &apos;encrpt_password&apos;;</div><div class="line">或者</div><div class="line">set password for &apos;username&apos;@&apos;localhost&apos; = password(&apos;password&apos;);</div></pre></td></tr></table></figure></p>
<p><strong>重置root密码</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">新建文本文件，输入以下内容</div><div class="line">UPDATE mysql.user SET Password=PASSWORD(&apos;new_pwd&apos;) WHERE User=&apos;root&apos;;</div><div class="line">FLUSH PRIVILEGES;</div><div class="line">将该文件起名为rt-reset.sql，并放在受保护的目录，然后用 --init-file，启动mysql：</div><div class="line">mysqld_sefe --init-file=/root/rt-reset.sql &amp;</div><div class="line">改完之后，删除rt-reset.sql</div></pre></td></tr></table></figure></p>
<p><strong>用户改名 需create user和对mysql数据库update 权限</strong></p>
<blockquote>
<p>rename user ‘username’@’localhost’ to ‘newusername’@’localhost’;</p>
</blockquote>
<p><strong>创建角色</strong></p>
<blockquote>
<p>create role ‘role_name’;</p>
</blockquote>
<p><strong>授权给角色</strong></p>
<blockquote>
<p>grant privilege on databases.table to ‘rolename’@’localhost’;</p>
</blockquote>
<p><strong>给用户赋予角色</strong></p>
<blockquote>
<p>grant ‘role_name’ to ‘username’@’localhost’;</p>
</blockquote>
<p><strong>用户登陆后设定角色</strong></p>
<blockquote>
<p>set role ‘rolename’;</p>
</blockquote>
<p><strong>用户脱离角色</strong></p>
<blockquote>
<p>set role none;</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python爬虫学习]]></title>
      <url>/python/python-crawler/</url>
      <content type="html"><![CDATA[<p>python的爬虫相对来说，会比较容易上手一点，采用官方和第三方的类库实现</p>
<p>本篇文章采用requests，BeautifulSoup这两个第三方库来编写爬虫</p>
<p>并采用jieba分词，分析文本中的关键词及其权重<br><a id="more"></a></p>
<h3 id="网页下载器"><a href="#网页下载器" class="headerlink" title="网页下载器"></a>网页下载器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line">response = requests.get(url)</div><div class="line"><span class="keyword">if</span> response.status_code == <span class="number">200</span></div><div class="line">	<span class="keyword">return</span> response.content</div></pre></td></tr></table></figure>
<p>在这里使用了http的get方式，传入要扒的网址，然后判断响应码</p>
<p>若返回200，则响应成功，返回html的内容</p>
<p><a href="http://docs.python-requests.org/zh_CN/latest/user/quickstart.html" target="_blank" rel="external">requests学习</a></p>
<h3 id="网页分析器"><a href="#网页分析器" class="headerlink" title="网页分析器"></a>网页分析器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> BeautifulSoup</div><div class="line">soup = BeautifulSoup(html,<span class="string">'html.parser'</span>)</div><div class="line">print(soup.prettify())</div></pre></td></tr></table></figure>
<p>这里的html为上文中的response.content，并采用html_parser解析html</p>
<p>这里只是简单地打印了soup的内容而已</p>
<p>附上<a href="https://www.crummy.com/software/BeautifulSoup/" target="_blank" rel="external">BeautifulSoup文档</a>和<a href="http://cuiqingcai.com/1319.html" target="_blank" rel="external">一篇不错的博文</a></p>
<h3 id="jieba分词地使用"><a href="#jieba分词地使用" class="headerlink" title="jieba分词地使用"></a>jieba分词地使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> jieba</div><div class="line">tags = jieba.analyse.extract_tags(sentence , topK=<span class="number">20</span>, withWeight=<span class="keyword">True</span>)</div><div class="line"><span class="keyword">for</span> item <span class="keyword">in</span> tags:</div><div class="line">	print(item[<span class="number">0</span>] + <span class="string">'\t'</span> + str(int(item[<span class="number">1</span>] * <span class="number">1000</span>)))</div></pre></td></tr></table></figure>
<p>此处使用jieba分词的基于TF-IDF关键词抽取</p>
<ul>
<li>sentence 为待提取的文本</li>
<li>topK 为返回几个 TF/IDF 权重最大的关键词，默认值为 20</li>
<li><p>withWeight 为是否一并返回关键词权重值，默认值为 False</p>
<p>附上<a href="http://cuiqingcai.com/1319.html" target="_blank" rel="external">jieba分词github网址</a><br>本文只是初步涉及python爬虫的学习，后续将继续学习，进阶python爬虫学习<br>附上一篇<a href="https://github.com/huizhe1/web-crawler" target="_blank" rel="external">实战</a>的代码</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> crawler </tag>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/start/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<a id="more"></a>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> start </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
