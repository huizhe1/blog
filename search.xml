<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[并发学习笔记 (三)]]></title>
      <url>/Concurrency3/</url>
      <content type="html"><![CDATA[<h3 id="SimpleDateFormat"><a href="#SimpleDateFormat" class="headerlink" title="SimpleDateFormat"></a>SimpleDateFormat</h3><h4 id="SimpleDateFormat-类的-JavaDoc"><a href="#SimpleDateFormat-类的-JavaDoc" class="headerlink" title="SimpleDateFormat 类的 JavaDoc"></a>SimpleDateFormat 类的 JavaDoc</h4><p>我们先来看看 SimpleDateFormat 类的 JavaDoc<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">* Date formats are not <span class="keyword">synchronized</span>.</div><div class="line">* It is recommended to create separate format instances <span class="keyword">for</span> each thread.</div><div class="line">* If multiple threads access a format concurrently, it must be <span class="keyword">synchronized</span></div><div class="line">* externally.</div><div class="line">*</div><div class="line">* @see          &lt;a href="https://docs.oracle.com/javase/tutorial/i18n/format/simpleDateFormat.html"&gt;Java Tutorial&lt;/a&gt;</div><div class="line">* <span class="meta">@see</span>          java.util.Calendar</div><div class="line">* <span class="meta">@see</span>          java.util.TimeZone</div><div class="line">* <span class="meta">@see</span>          DateFormat</div><div class="line">* <span class="meta">@see</span>          DateFormatSymbols</div><div class="line">* <span class="meta">@author</span>       Mark Davis, Chen-Lieh Huang, Alan Liu</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleDateFormat</span> <span class="keyword">extends</span> <span class="title">DateFormat</span> </span>&#123;</div></pre></td></tr></table></figure></p>
<p>JavaDoc 中，我们将英文翻译一下：</p>
<ul>
<li>建议为每个线程创建单独的日期／时间格式实例。</li>
<li>如果多个线程同时访问一个日期／时间格式，则必须同步</li>
</ul>
<h4 id="场景练习"><a href="#场景练习" class="headerlink" title="场景练习"></a>场景练习</h4><p>通过具体的场景，我们来深入学习和理解 SimpleDateFormat 类</p>
<p>我们假设有一个静态变量：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</div></pre></td></tr></table></figure></p>
<p>若多个线程都执行以下操作<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String dateStamp = dateFormat.format(<span class="keyword">new</span> Date);</div></pre></td></tr></table></figure></p>
<p>结果可能很混乱，因为 dateFormat 使用的内部数据结构可能会被并发的访问所破环。</p>
<h4 id="场景代码实现"><a href="#场景代码实现" class="headerlink" title="场景代码实现"></a>场景代码实现</h4><p>我们可以运行一下源码看看结果</p>
<p>这里为了数据量大一点，可以更好的显示结果，所以我用了死循环，需要手动终止程序。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.text.ParseException;</div><div class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtilsUnSynch</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatDate</span><span class="params">(Date date)</span> <span class="keyword">throws</span> ParseException</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> sdf.format(date);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">parse</span><span class="params">(String strDate)</span> <span class="keyword">throws</span> ParseException</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> sdf.parse(strDate);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        Runnable r = () -&gt; &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">": "</span> + DateUtilsUnSynch.parse(<span class="string">"2018-08-02 09:45:23"</span>));</div><div class="line">            &#125; <span class="keyword">catch</span> (ParseException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">            <span class="keyword">new</span> Thread(r).start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="运行结果如下："><a href="#运行结果如下：" class="headerlink" title="运行结果如下："></a>运行结果如下：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Exception in thread <span class="string">"Thread-720"</span> java.lang.NumberFormatException: For input string: <span class="string">"425018.E4250184E4"</span></div><div class="line">	at sun.misc.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:<span class="number">2043</span>)</div><div class="line">	at sun.misc.FloatingDecimal.parseDouble(FloatingDecimal.java:<span class="number">110</span>)</div><div class="line">	at java.lang.Double.parseDouble(Double.java:<span class="number">538</span>)</div><div class="line">	at java.text.DigitList.getDouble(DigitList.java:<span class="number">169</span>)</div><div class="line">	at java.text.DecimalFormat.parse(DecimalFormat.java:<span class="number">2089</span>)</div><div class="line">	at java.text.SimpleDateFormat.subParse(SimpleDateFormat.java:<span class="number">1869</span>)</div><div class="line">	at java.text.SimpleDateFormat.parse(SimpleDateFormat.java:<span class="number">1514</span>)</div><div class="line">	at java.text.DateFormat.parse(DateFormat.java:<span class="number">364</span>)</div><div class="line">	at javabook.SimpleDateUnSynch.DateUtilsUnSynch.parse(DateUtilsUnSynch.java:<span class="number">16</span>)</div><div class="line">	at javabook.SimpleDateUnSynch.DateUtilsUnSynch.lambda$main$<span class="number">0</span>(DateUtilsUnSynch.java:<span class="number">23</span>)</div><div class="line">	at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</div><div class="line">Thread-<span class="number">754</span>: Thu Aug <span class="number">02</span> <span class="number">09</span>:<span class="number">45</span>:<span class="number">23</span> CST <span class="number">2018</span></div><div class="line">Thread-<span class="number">46</span>: Thu Aug <span class="number">02</span> <span class="number">09</span>:<span class="number">45</span>:<span class="number">23</span> CST <span class="number">8</span></div><div class="line">Thread-<span class="number">753</span>: Thu Aug <span class="number">02</span> <span class="number">09</span>:<span class="number">45</span>:<span class="number">23</span> CST <span class="number">2018</span></div></pre></td></tr></table></figure>
<h4 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h4><ul>
<li>我们可以看到 Thread-720 直接挂死了，没起来</li>
<li>Thread-46 虽然没挂死，但输出的时间是有错误的</li>
</ul>
<p>为什么会出现线程不安全的问题呢？为什么上文会说 dateFormat 使用的内部数据结构可能会被并发的访问所破环呢？</p>
<h4 id="JDK-源码"><a href="#JDK-源码" class="headerlink" title="JDK 源码"></a>JDK 源码</h4><p>因为 SimpleDateFormat 继承了 DateFormat，所以我们先来看看 DateFormat 的源码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DateFormat</span> <span class="keyword">extends</span> <span class="title">Format</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * The &#123;<span class="doctag">@link</span> Calendar&#125; instance used for calculating the date-time fields</span></div><div class="line"><span class="comment">     * and the instant of time. This field is used for both formatting and</span></div><div class="line"><span class="comment">     * parsing.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * &lt;p&gt;Subclasses should initialize this field to a &#123;<span class="doctag">@link</span> Calendar&#125;</span></div><div class="line"><span class="comment">     * appropriate for the &#123;<span class="doctag">@link</span> Locale&#125; associated with this</span></div><div class="line"><span class="comment">     * &lt;code&gt;DateFormat&lt;/code&gt;.</span></div><div class="line"><span class="comment">     * <span class="doctag">@serial</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">protected</span> Calendar calendar;</div></pre></td></tr></table></figure></p>
<p>一进入 DateFormat 类，我们就可以看到 DateFormat 中定义了一个protected属性的 Calendar 类的对象：calendar </p>
<p>在回头看看 SimpleDateFormat 的源码，我们主要关注两个方法：</p>
<ul>
<li>private StringBuffer format(Date date, StringBuffer toAppendTo, FieldDelegate delegate)</li>
<li>private void subFormat(int patternCharIndex, int count, FieldDelegate delegate, StringBuffer buffer, boolean useDateFormatSymbols)</li>
</ul>
<p><img src="https://static.huizhe.xyz/article-images/1533459825.png" alt="SimpleDateFormat 方法"></p>
<p>在 <strong>format</strong> 方法中，我们可以看到 calendar.setTime(date); 该语句修改了 calendar</p>
<p>由此我们可以发现为什么上文中运行结果会出现错误了。</p>
<p>我们假设有两个线程持有了同一个 SimpleDateFormat 的实例，并分别调用了 format 方法</p>
<ul>
<li>线程 1 调用了 format 方法，改变了 calendar </li>
<li>线程 1 中断了</li>
<li>线程 2 调用了 format 方法，改变了 calendar </li>
<li>线程 2 中断了</li>
<li>线程 1 回来了</li>
</ul>
<p>calendar 被 线程2 改变了，所以线程1 走上了线程2 设计的道路</p>
<p>如果多个线程同时争抢 calendar 对象，则会出现各种问题</p>
<p>而在 <strong>subFormat</strong> 方法中，则大量的使用到了 calendar 变量，由此我们可以看到将 calendar 设置为成员变量的好处：就是调用 subFormat 方法的时候，少了一个参数。不过恰恰是因为这个，而带来了很多问题。</p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>综上，我们学习了 为什么 SimpleDateFormat 为什么是线程不安全的原因了。那么，我们该如何解决呢？</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ol>
<li>需要的时候创建新实例<br> 即在需要用到 SimpleDateFormat 对象的时候新建一个实例。将 <strong>非线程安全</strong> 的类设置为 <strong>局部私有</strong> 就能避免多线程问题。不过，由此也加重了创建对象的负担。</li>
<li><p>使用同步：即 synchronized 关键字</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.text.ParseException;</div><div class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtilsUnSynch</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> String <span class="title">formatDate</span><span class="params">(Date date)</span> <span class="keyword">throws</span> ParseException</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> sdf.format(date);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> Date <span class="title">parse</span><span class="params">(String strDate)</span> <span class="keyword">throws</span> ParseException</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> sdf.parse(strDate);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        Runnable r = () -&gt; &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">": "</span> + DateUtilsUnSynch.parse(<span class="string">"2018-08-02 09:45:23"</span>));</div><div class="line">            &#125; <span class="keyword">catch</span> (ParseException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">            <span class="keyword">new</span> Thread(r).start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 不过采用这种方案，开销会很大。</p>
</li>
<li><p>使用线程局部变量 ThreadLocal</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.text.ParseException;</div><div class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateThreadLocalTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;SimpleDateFormat&gt; dateFormat = ThreadLocal.withInitial(()-&gt;<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>));</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        Runnable r = () -&gt; &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">": "</span> + dateFormat.get().parse(<span class="string">"2018-08-02 09:45:23"</span>));</div><div class="line">            &#125; <span class="keyword">catch</span> (ParseException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">            <span class="keyword">new</span> Thread(r).start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 在一个给定线程中首次调用get方法时，会调用initialValue 方法。之后，get方法会返回属于当前线程的那个实例<br> 使用ThreadLocal，将共享变量变为独享，减少创建对象的开销。<br> 对性能要求比较高情况下，一般推荐使用这种方法。</p>
</li>
</ol>
<h4 id="java-lang-ThreadLocal-1-2"><a href="#java-lang-ThreadLocal-1-2" class="headerlink" title="java.lang.ThreadLocal 1.2"></a>java.lang.ThreadLocal<t> 1.2</t></h4><ol>
<li>T get()<br> 得到这个线程的当前值，如果是首次调用get，会调用 initialize 来得到这个值</li>
<li>protected initialize()<br> 应覆盖这个方法来提供一个初始值。默认情况下，这个方法返回null</li>
<li>void set(T t)<br> 为这个线程设置一个新值</li>
<li>void remove()<br> 删除对应这个线程的值 </li>
<li>static &lt;S&gt; ThreadLocal&lt;S&gt; withInitial(Supplier&lt;? extends S&gt; supplier) 8<br> 创建一个线程局部变量，其初始值通过调用给定的supplier 生成</li>
</ol>
<h3 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h3><p>如果多个线程需要等待一个共享的随机数生成器，这会很低效。<br>可使用ThreadLocal 辅助类为各个线程提供一个单独的生成器。</p>
<p>JAVA SE 7 提供了一个便利类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//bound 为数字</span></div><div class="line"><span class="keyword">int</span> random = ThreadLocalRandom.current().nextInt(<span class="keyword">int</span> bound);</div></pre></td></tr></table></figure></p>
<p>ThreadLocalRandom.current() 调用会返回特定与当前线程的Random 类实例。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://book.douban.com/subject/3146174/" target="_blank" rel="external">JAVA核心技术（卷1）原书第10版</a><br><a href="http://www.54tianzhisheng.cn/2018/06/19/SimpleDateFormat/" target="_blank" rel="external">SimpleDateFormat 如何安全的使用？</a></p>
]]></content>
      
        <categories>
            
            <category> JAVA </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[并发学习笔记 (二)]]></title>
      <url>/Concurrency2/</url>
      <content type="html"><![CDATA[<h3 id="java-内存模型"><a href="#java-内存模型" class="headerlink" title="java 内存模型"></a>java 内存模型</h3><p>首先我们来看一下java的内存模型<br><img src="https://static.huizhe.xyz/article-images/memorymodel.jpg" alt="内存模型"></p>
<p>我们可以看到，当需要处理数据时，CPU会从Cache中取值。但是有一个问题出现，就是 Cache 中的数据是从主内存拷贝过来的。在多线程场景下，这个 Cache 拷贝的值有时候没能得到及时地更新，此时，CPU处理完的结果很有可能会失控。此问题就是缓存一致性问题，即Cache和主内存数据同步问题。</p>
<p>那我们该怎么解决这个问题呢？</p>
<h4 id="通过在总线加-LOCK-锁"><a href="#通过在总线加-LOCK-锁" class="headerlink" title="通过在总线加 LOCK 锁"></a>通过在总线加 LOCK 锁</h4><p>通过<strong>独占 CPU 方式</strong> 实现，即同一时间只有一个CPU在运行，效率较低</p>
<h4 id="通过-缓存一致性-协议"><a href="#通过-缓存一致性-协议" class="headerlink" title="通过 缓存一致性 协议"></a>通过 缓存一致性 协议</h4><p>允许多核处理，并且让共享副本在线程之间具有可见性</p>
<h3 id="并发编程的三大概念"><a href="#并发编程的三大概念" class="headerlink" title="并发编程的三大概念"></a>并发编程的三大概念</h3><h4 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h4><p>可见性是指 <strong>线程</strong>之间的可见性。即一个线程修改的状态对另一个线程是可见的。也就是说，当一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。</p>
<h4 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h4><p>原子是最小单位，具有不可分割性。原子性：即一个操作或多个操作，要么全部执行要么全部执行。</p>
<p>在java中，对<strong>基本数据类型</strong>的变量的 <strong>读取和赋值</strong> 操作是原子性操作。</p>
<p>非原子操作都会存在线程安全问题，此时我们需要用到同步技术(<strong>synchronized</strong>) 来让它变化一个原子操作。一个操作是原子操作，我们就称它具有原子性。</p>
<h4 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h4><p>有序性就是<strong>程序执行的顺序</strong>按照 <strong>代码的先后顺序</strong> 执行</p>
<p><strong>指令重排序</strong></p>
<ul>
<li>一般来说，处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中的各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序<strong>最终执行结果</strong>是一致的。</li>
<li>指令重排序不会影响单个线程的执行，但是会影响到线程并发执行的正确性。</li>
<li>在java内存模型中，允许编译器和处理器对指令进行重排序。</li>
</ul>
<h3 id="Volatile-域"><a href="#Volatile-域" class="headerlink" title="Volatile 域"></a>Volatile 域</h3><h4 id="volatile-概念"><a href="#volatile-概念" class="headerlink" title="volatile 概念"></a>volatile 概念</h4><ul>
<li>volatile 关键字为实例域的同步访问提供了一种免锁机制。 </li>
<li>如果声明一个域为 volatile，那么编译器和虚拟机就知道该域是可能被另一个线程并发更新的。 即保证了不同线程对这个变量进行读取时的可见性。</li>
<li>volatile 修饰的变量禁止 指令重排序</li>
<li>volatile 修饰的变量，JVM保证每次读变量都从内存中读，跳过了CPU Cache 这一步</li>
</ul>
<h4 id="volatile-可见性"><a href="#volatile-可见性" class="headerlink" title="volatile 可见性"></a>volatile 可见性</h4><p>我们来看一段代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//线程1</span></div><div class="line"><span class="keyword">boolean</span> stop = <span class="keyword">false</span>;</div><div class="line"><span class="keyword">while</span>(!stop)&#123;</div><div class="line">    doSomething();</div><div class="line">&#125;</div><div class="line"><span class="comment">//线程2</span></div><div class="line">stop = <span class="keyword">true</span>;</div></pre></td></tr></table></figure></p>
<p>上面这段代码虽然是存在比较小的概率会导致无法中断线程，但是一旦发生，就会造成死循环了<br>虽然线程2将 stop 设置为了true，但是如果线程没将stop变量写入主存当中，线程1就会一直循环下去</p>
<p>但是用了 volatile 关键字之后</p>
<ul>
<li>使用 volatile 关键字会强制将修改的值立即写入主存</li>
<li>当线程2进行修改时，会导致线程1的工作内存中缓存变量的 stop 的缓存行无效</li>
<li>线程1工作内存中缓存变量stop的缓存行被无效化，因此线程1再次读取变量stop的值时会去主存读取</li>
</ul>
<h4 id="为什么volatile是非原子性"><a href="#为什么volatile是非原子性" class="headerlink" title="为什么volatile是非原子性"></a>为什么volatile是非原子性</h4><ul>
<li>volatile的非原子性：线程工作内容中的值从主内存中直接加载，一旦加载完成，就不会再产生对应的变化。</li>
<li>JVM保证的是从主内存中加载到线程工作内存中的值是最新的，但是无法保证原子性。 </li>
<li>volatile解决的是变量读时的可见性问题，无法保证原子性。</li>
</ul>
<p>我们来看一段代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileTest</span>  <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"  : "</span>+i +<span class="string">",  "</span>+ (++i));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j &lt;<span class="number">100</span>;j++) &#123;</div><div class="line">          Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> VolatileTest(),Integer.toString(j));</div><div class="line">          t1.start();</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>打印结果</strong></p>
<p><img src="https://static.huizhe.xyz/article-images/1533448027.jpg" alt="结果"></p>
<p>通过仔细的查看，我们可以看到有两个线程获取到的 i 都是 95，但是执行 ++i 之后，一个是97，一个是96了。<br>这是因为 <strong>+i 和 +(++i) 是两条指令</strong><br>假设当前 i = 1，线程1和线程2都执行了+i，然后线程1执行了+(++i),此时 <strong>i=2</strong>，然后线程2执行 +(++i)，此时 <strong>i=3</strong>，所以线程1 输出了（1，2），而线程2输出（1，3）<br>由此我们可以得知，<strong>volatile 不能解决并发计算问题</strong></p>
<h4 id="volatile-使用场景"><a href="#volatile-使用场景" class="headerlink" title="volatile 使用场景"></a>volatile 使用场景</h4><p>通常来说，使用volatile必须具备以下2个条件：</p>
<pre><code>1. 对变量的写操作不依赖于当前值
2. 该变量没有包含在具有其他变量的不变式中
</code></pre><ul>
<li>状态标识</li>
<li>一次性安全发布</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ol>
<li><a href="https://book.douban.com/subject/3146174/" target="_blank" rel="external">JAVA核心技术（卷1）原书第10版</a></li>
<li><a href="http://zhoupq.com/Java并发——volatile/#内存模型" target="_blank" rel="external">Java 并发——volatile</a></li>
<li><a href="https://juejin.im/post/5ad1adea6fb9a028c67624e9#heading-9" target="_blank" rel="external">Java 之 volatile 详解</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> JAVA </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[并发学习笔记（一）]]></title>
      <url>/Concurrency/</url>
      <content type="html"><![CDATA[<p>线程：每一个任务称为一个线程（thread）,它是线程控制的简称。</p>
<p>可以同时运行一个以上线程的程序称为多线程程序。</p>
<p>多进程和多线程的区别：</p>
<p>本质的区别在于每个进程拥有自己的一整套变量，而线程则共享数据。</p>
<p>共享变量使线程之间的通信比进程之间的通信更有效，更容易。<br><a id="more"></a></p>
<h3 id="在线程中执行任务"><a href="#在线程中执行任务" class="headerlink" title="在线程中执行任务"></a>在线程中执行任务</h3><ol>
<li><p>将任务代码移到实现了 <strong>Runnable</strong>  接口的类的 run 方法中。这个接口只有一个方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于 Runnable 是一个函数式接口，可以用 <strong>lambda</strong> 表达式建立一个实例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Runnable r = () -&gt; &#123; task code &#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>由 Runnable  创建一个Thread 对象：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Thread t = <span class="keyword">new</span> Thread(r);</div></pre></td></tr></table></figure>
</li>
<li><p>启动线程：</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">t.start</div></pre></td></tr></table></figure>
</li>
</ol>
<p>也可以通过构建一个Thread类的子类定义一个线程</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        task code</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：<br>不要调用 <strong>Thread</strong> 类或 <strong>Runnable</strong> 对象的run方法。直接调用run方法，只会执行同一个线程中的任务，而不会启动新线程。应该调用 <strong>Thread.start</strong> 方法。。该方法将创建一个执行run方法的新线程。</p>
<p><strong>java.lang.Thread</strong></p>
<ol>
<li>Thread(Runnable target)<br>构造一个新线程，用于调用给定目标的 <strong>run()</strong> 方法</li>
<li>void start()<br>启动这个线程，将引发调用 run() 方法。这个方法将立即返回，并且新线程将并发运行</li>
<li>void run()<br>调用关联 Runnable 的 run 方法</li>
</ol>
<p><strong>java.lang.Runnable</strong></p>
<ul>
<li>void run()<br>必须覆盖这个方法，并在这个方法中提供所要执行的任务指令</li>
</ul>
<h4 id="中断线程"><a href="#中断线程" class="headerlink" title="中断线程"></a>中断线程</h4><p>当线程的run方法执行方法体中最后一条语句后，并经由执行return语句返回时，或者出现了在方法中没有捕获的异常时，线程将终止。<br>没有可以强制线程终止的方法。但是，<strong>interrupt</strong> 方法可以用来请求终止线程<br>当线程调用 interrupt 方法时，线程的中断状态将被置位。这是每一个线程都具有的 boolean 标志<br>每个线程都应该不时地检查这个标志，以判断线程是否被中断。</p>
<p>可调用静态的 Thread.currentThread 方法获得当前线程，然后调用isInterrupted 方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span>(!Thread.currentThread().isInterrupted() &amp;&amp; more work to <span class="keyword">do</span>)&#123;</div><div class="line">            <span class="keyword">do</span> more work</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>不过，如果线程被阻塞，就无法检测中断状态，这时就会抛出 <strong>InterruptedException</strong> 异常<br>当在一个被阻塞的线程（调用 <strong>sleep</strong> 或 <strong>wait</strong> ）上调用 interrupt 方法时，阻塞调用将会被 InterruptedException 异常中断</p>
<h4 id="java-lang-Thread"><a href="#java-lang-Thread" class="headerlink" title="java.lang.Thread"></a>java.lang.Thread</h4><ol>
<li>void interrupt()<br>向线程发送中断请求。线程的中断状态将被设置为true。如果该线程目前被sleep 或 wait 调用阻塞，那么，InterruptedException 异常被抛出</li>
<li>static boolean interrupted()<br>测试当前线程是否被中断。注意，这是一个 <strong>静态方法</strong>。这一调用会产生副作用——它将当前线程的中断状态<strong>重置为false</strong></li>
<li>boolean isInterrupted()<br>测试线程是否被终止。这一调用<strong>不改变</strong>线程的中断状态</li>
<li>static Thread currentThread()<br>返回代表当前执行线程的Thread 对象</li>
</ol>
<h3 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h3><p>线程可以有如下6种状态：</p>
<ol>
<li>New (新创建)</li>
<li>Runnable (可运行)</li>
<li>Blocked (被阻塞)</li>
<li>Waiting (等待)</li>
<li>Timed waiting (计时等待)</li>
<li>Terminated (被终止)</li>
</ol>
<p><img src="https://static.huizhe.xyz/article-images/currentState.jpg" alt="线程状态"></p>
<h4 id="新创建线程"><a href="#新创建线程" class="headerlink" title="新创建线程"></a>新创建线程</h4><p>当用 <strong>new</strong> 操作符创建一个新线程时，如 new Thread(r)，该线程还没有开始运行。这意味着它的状态是new</p>
<h4 id="可运行线程"><a href="#可运行线程" class="headerlink" title="可运行线程"></a>可运行线程</h4><p>一旦调用 <strong>start</strong> 方法，线程处于runnable 状态。一个可运行的线程可能正在运行也可能没有运行，这取决于操作系统给线程提供运行的时间。运行中的线程被中断，目的是为了让其他线程获得运行机会。线程调度的细节依赖于操作系统提供的服务。<strong><a href="https://baike.baidu.com/item/进程调度/10702294" target="_blank" rel="external">抢占式调度</a></strong> 给每一个可运行线程一个时间片来执行任务。当时间片用完，操作系统剥夺该线程的运行权，并给另一个线程运行机会。<br>在任何给定时刻，一个可运行的线程可能正在运行也可能没有运行（这就是为什么将这个状态称为可运行而不是运行）</p>
<h4 id="被阻塞线程和等待线程"><a href="#被阻塞线程和等待线程" class="headerlink" title="被阻塞线程和等待线程"></a>被阻塞线程和等待线程</h4><p>当线程处于被阻塞或等待状态时，它暂时不活动。它不运行任何代码且小号最少的资源。知道线程调度器重新激活它。细节取决于它是怎样达到非活动状态的</p>
<ul>
<li><p>当一个线程试图获取一个内部的对象锁，而该锁被其他线程持有，则该线程进入阻塞状态。当所有其他线程释放该锁，并且线程调度器允许本线程持有它的时候，该线程将变成非阻塞状态</p>
</li>
<li><p>当线程等待另一个线程通知调度器一个条件时，它自己进入等待状态。在调用 <strong>Object.wait</strong> 方法或 <strong>Thread.join</strong> 方法，或者是等待 <strong>java.util.concurrent</strong> 库中的 <strong>Lock 或 Condition</strong> 时，就会出现这种情况</p>
</li>
<li><p>有几个方法有一个超时参数。调用它们导致线程进入计时等待状态。这一状态将一直保持到超时期满或者接收到适当的通知。带有超时的方法有 Thread.sleep 和 Object.wait 、 Object.join 、 Lock.tryLock 以及 Condition.await 的计时版</p>
</li>
</ul>
<h4 id="被终止的线程"><a href="#被终止的线程" class="headerlink" title="被终止的线程"></a>被终止的线程</h4><ul>
<li>因为 run 方法正常退出而自然死亡</li>
<li>因为一个没有捕获的异常终止了 run 方法而意外死亡</li>
</ul>
<h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><p>在大多数实际的多线程应用中，两个或两个以上的线程需要共享对同一数据的存取。如果两个线程存取相同的对象，并且每一个线程都调用了一个修改该对象状态的方法，将会发生什么呢？根据各线程访问数据的的次序，可能会产生讹误的对象。这样的情况通常被称为<strong>竞争条件</strong></p>
<p>我们来模拟一个有若干账户的银行。随机地生成在这些账户之间转移在钱款的交易。每一个账户有一个线程。每一笔交易中，会从线程所服务的账户中随机转移一定数目的钱款到另一个随机账户。</p>
<h4 id="账户转移的方法编写"><a href="#账户转移的方法编写" class="headerlink" title="账户转移的方法编写"></a>账户转移的方法编写</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">double</span> amount)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span> (accounts[from] &lt; amount)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    System.out.println(Thread.currentThread());</div><div class="line">    accounts[from] -= amount;</div><div class="line">    System.out.printf(<span class="string">"%10.2f from %d to %d"</span>, amount, from, to);</div><div class="line">    accounts[to] += amount;</div><div class="line">    System.out.printf(<span class="string">" Total Balance: %10.2f%n"</span>, getTotalBalance());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Runnable-类的代码"><a href="#Runnable-类的代码" class="headerlink" title="Runnable 类的代码"></a>Runnable 类的代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Runnable r = () -&gt;</div><div class="line">&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</div><div class="line">            <span class="comment">//bank.size 返回的是Bank类accounts数组的长度，这里设置为100，数组中的值均为1000</span></div><div class="line">            <span class="keyword">int</span> toAccount = (<span class="keyword">int</span>)(bank.size() * Math.random());</div><div class="line">            <span class="comment">//MAX_AMOUNT 为 1000</span></div><div class="line">            <span class="keyword">double</span> amount = MAX_AMOUNT * Math.random();</div><div class="line">            bank.transfer(fromAccount, toAccount, amount);</div><div class="line">            <span class="comment">///DELAY 为 10</span></div><div class="line">            Thread.sleep((<span class="keyword">int</span>)(DELAY * Math.random()));</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>当这个模拟程序运行时，我们不清楚某一时刻某一个账户余额剩多少钱，不过我们唯一能确定的是，所有账户的总金额应该保持不变。应为 NACCOUNTS <em> INITIAL_BALANCE<br>所以我们在每次交易的结尾，transfer 方法重新计算总值打印出来。<br>ps：这个程序是个死循环，只能按 <em>*Ctrl+C</em></em> 终止程序</p>
<p>程序运行结果如下：<br><img src="https://static.huizhe.xyz/article-images/UnsynchResult.jpg" alt="非同步结果"></p>
<p>正如结果所示，出现了错误。银行的余额应该保持在10W，才是正确的结果。但是过了一段时间之间，这个结果变了。</p>
<h4 id="附上完整源码"><a href="#附上完整源码" class="headerlink" title="附上完整源码"></a>附上完整源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//测试类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsynchBankTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NACCOUNTS = <span class="number">100</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> INITIAL_BALANCE = <span class="number">1000</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> MAX_AMOUNT = <span class="number">1000</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DELAY = <span class="number">10</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        BankUnSynch bank = <span class="keyword">new</span> BankUnSynch(NACCOUNTS, INITIAL_BALANCE);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;NACCOUNTS;i++) &#123;</div><div class="line">            <span class="keyword">int</span> fromAccount = i;</div><div class="line">            Runnable r = () -&gt;</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</div><div class="line">                        <span class="keyword">int</span> toAccount = (<span class="keyword">int</span>)(bank.size() * Math.random());</div><div class="line">                        <span class="keyword">double</span> amount = MAX_AMOUNT * Math.random();</div><div class="line">                        bank.transfer(fromAccount, toAccount, amount);</div><div class="line">                        Thread.sleep((<span class="keyword">int</span>)(DELAY * Math.random()));</div><div class="line">                    &#125;</div><div class="line">                &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</div><div class="line"></div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">            Thread t = <span class="keyword">new</span> Thread(r);</div><div class="line">            t.start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//银行类</span></div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BankUnSynch</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span>[] accounts;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BankUnSynch</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">double</span> initialBalance)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        accounts = <span class="keyword">new</span> <span class="keyword">double</span>[n];</div><div class="line">        Arrays.fill(accounts, initialBalance);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 转账操作</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> from</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> to</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> amount</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">double</span> amount)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">if</span> (accounts[from] &lt; amount)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        <span class="comment">//获取当前线程</span></div><div class="line">        System.out.println(Thread.currentThread());</div><div class="line">        accounts[from] -= amount;</div><div class="line">        System.out.printf(<span class="string">"%10.2f from %d to %d"</span>, amount, from, to);</div><div class="line">        accounts[to] += amount;</div><div class="line">        System.out.printf(<span class="string">" Total Balance: %10.2f%n"</span>, getTotalBalance());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取 accounts 数组的总金额</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTotalBalance</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">double</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">double</span> a: accounts)</div><div class="line">            sum += a;</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> accounts.length;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="竞争条件详解"><a href="#竞争条件详解" class="headerlink" title="竞争条件详解"></a>竞争条件详解</h4><p>上面的代码运行时，其实有几个线程更新银行账户余额。一段时间之后，就出现了错误。总额要么增加了，要是变少了。当线程试图同时更新同一个账户的时候，这个问题就出现了。假设两个线程同时执行指令<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">accounts[to] += amount;</div></pre></td></tr></table></figure></p>
<p>这个时候会发生什么呢？由于这不是原子操作。该指令可能会被处理为：</p>
<ol>
<li>将 accounts[to] 加载到寄存器</li>
<li>增加 amount</li>
<li>将结果写回 accounts[to]</li>
</ol>
<p>现在我们假定第一个线程执行步骤1和2，然后，它被剥夺了运行权。第二个线程被唤醒并修改了 accounts 数组中的<strong>同一项</strong>，即第二个线程执行完了这三个步骤。然后，第一个线程被唤醒并完成其第三步<br>这样，这一动作就擦去了第二个线程所作的更新，于是，总金额不在正确。</p>
<h3 id="锁对象"><a href="#锁对象" class="headerlink" title="锁对象"></a>锁对象</h3><p>如何防止上面情况的发生呢？<br>有两种机制防止代码块受并发访问的干扰。</p>
<ol>
<li>锁和条件对象</li>
<li>synchronized 关键字</li>
</ol>
<h4 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h4><p>使用 <strong>ReentrantLock</strong> 保护代码块。代码如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">myLock.lock();<span class="comment">// 一个ReentrantLock 对象 </span></div><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">	critical section</div><div class="line">&#125;</div><div class="line"><span class="keyword">finally</span>&#123;</div><div class="line">	myLock.unlock();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样我们就可以确保任何时刻只有一个线程进入临界区。一旦一个线程封锁了锁对象，其他任何线程都无法通过lock语句。当其他线程调用lock时，它们被阻塞，直到第一个线程释放锁对象</p>
<h4 id="条件对象"><a href="#条件对象" class="headerlink" title="条件对象"></a>条件对象</h4><p>现在我们来回想一下业务，当账户中没有足够的余额时，我们是不是应该等待直到另一个线程向账户中注入资金？但是因为这一线程刚刚获得了对bankLock的排他性访问，因此导致了其他线程都被阻塞，这就是成了死锁。这时，我们就需要用到条件对象了。</p>
<p>一个锁对象可以有一个或多个相关的条件对象。可以用 <strong>newCondition</strong> 方法获得一个条件对象。习惯上给每一个条件对象命名为可以反映它所表达的条件的名字。</p>
<p>例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span> </span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="keyword">private</span> Lock bankLock;</div><div class="line">    <span class="keyword">private</span> Condition sufficientFunds;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bank</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        ....</div><div class="line">        bankLock = <span class="keyword">new</span> ReentrantLock();</div><div class="line">        sufficientFunds = bankLock.newCondition();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当 <strong>transfer</strong> 方法发现余额不足，调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sufficientFunds.await();</div></pre></td></tr></table></figure></p>
<p>表示当前线程现在被阻塞了，并放弃了锁。我们希望这样可以使得另一个线程可以进行增加账户余额的操作。</p>
<p><strong>注意</strong>：</p>
<p>等待获得锁的线程和调用 await 方法的线程存在本质上的不同。一旦一个线程调用 await 方法，它进入该条件的 <strong>等待集</strong>。当锁可用时，该线程不能马上解除阻塞。相反，它处于阻塞状态，直到另一线程调用同一条件上的 <strong>signalAll</strong> 方法时为止。</p>
<p>signalAll 方法激活因为这一条件而等待的所有线程。当这些线程从等待集当中移出时，它们再次成为可运行的，调度器将再次激活它们。此时，线程应该再次测试该条件。由于无法确保该条件被满足—— signalAll 方法仅仅是通知正在等待的线程：此时有可能已经满足条件，值得再次去检测该条件。<br>因此，对await 的调用应该采用以下的方式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span>(!(ok to proceed))</div><div class="line">	condition.await();</div></pre></td></tr></table></figure></p>
<p>何时调用 signalAll 方法呢？建议在对象的状态有利于等待线程的方向改变时调用 signalAll。如：当完成转账时，就调用 signalAll 方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to, <span class="keyword">double</span> amount)</span> <span class="keyword">throws</span> InterruptedException</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    bankLock.lock();</div><div class="line">    <span class="keyword">try</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">while</span> (accounts[from] &lt; amount)</div><div class="line">            sufficientFunds.await();</div><div class="line">        System.out.println(Thread.currentThread());</div><div class="line">        accounts[from] -= amount;</div><div class="line">        System.out.printf(<span class="string">"%10.2f from %d to %d"</span>, amount, from, to);</div><div class="line">        accounts[to] += amount;</div><div class="line">        System.out.printf(<span class="string">" Total Balance: %10.2f%n"</span>, getTotalBalance());</div><div class="line">        sufficientFunds.signalAll();</div><div class="line">    &#125;<span class="keyword">finally</span> &#123;</div><div class="line">        bankLock.unlock();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>另一个方法是<strong>signal</strong>，此方法是随机解除选择等待集中<strong>某个</strong>线程的阻塞状态。这个方法存在危险，即随机选择的线程发现自己仍然不能运行，那它就会再次被阻塞，若无其他线程再次调用signal，那系统就死锁了。</p>
<p><strong>附上修改后的 Bank 源码</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bank</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span>[] accounts;</div><div class="line">    <span class="keyword">private</span> Lock bankLock;</div><div class="line">    <span class="keyword">private</span> Condition sufficientFunds;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 初始化</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> n 数组长度</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> initialBalance</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bank</span><span class="params">(<span class="keyword">int</span> n ,<span class="keyword">double</span> initialBalance)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        accounts = <span class="keyword">new</span> <span class="keyword">double</span>[n];</div><div class="line">        Arrays.fill(accounts, initialBalance);</div><div class="line">        bankLock = <span class="keyword">new</span> ReentrantLock();</div><div class="line">        sufficientFunds = bankLock.newCondition();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 转账操作</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> from</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> to</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> amount</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to, <span class="keyword">double</span> amount)</span> <span class="keyword">throws</span> InterruptedException</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        bankLock.lock();</div><div class="line">        <span class="keyword">try</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">while</span> (accounts[from] &lt; amount)</div><div class="line">                sufficientFunds.await();</div><div class="line">            System.out.println(Thread.currentThread());</div><div class="line">            accounts[from] -= amount;</div><div class="line">            System.out.printf(<span class="string">"%10.2f from %d to %d"</span>, amount, from, to);</div><div class="line">            accounts[to] += amount;</div><div class="line">            System.out.printf(<span class="string">" Total Balance: %10.2f%n"</span>, getTotalBalance());</div><div class="line">            sufficientFunds.signalAll();</div><div class="line">        &#125;<span class="keyword">finally</span> &#123;</div><div class="line">            bankLock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取 accounts 数组的总金额</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTotalBalance</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        bankLock.lock();</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            <span class="keyword">double</span> sum = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">double</span> a: accounts)</div><div class="line">                sum += a;</div><div class="line">            <span class="keyword">return</span> sum;</div><div class="line">        &#125;<span class="keyword">finally</span> &#123;</div><div class="line">            bankLock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> accounts.length;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>总结一下锁和条件的关键之处</strong></p>
<ol>
<li>锁用来保护代码片段，任何时刻只能有一个线程执行被保护的代码</li>
<li>锁可以管理试图进入被保护代码段的线程</li>
<li>锁可以拥有一个或多个相关的条件对象</li>
<li>每个条件对象管理那些已经进入被保护的代码段但还不能运行的线程</li>
</ol>
<h4 id="synchronized-关键字"><a href="#synchronized-关键字" class="headerlink" title="synchronized 关键字"></a>synchronized 关键字</h4><p>Lock 和 Condition 接口为程序设计人员提供了高度的锁定控制。然而大多数情况下，并不需要那样的控制，并且可以使用一种嵌入到Java语言内部的机制。从 1.0 版本开始，Java 中的每一个对象都有一个内部锁。如果一个方法用 synchronized 关键字声明，那么对象的锁将保护整个方法。即，要调用该方法，线程必须获得内部的对象锁。<br>也就是说：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">do</span> something</div><div class="line">&#125;</div><div class="line"><span class="comment">//等价于</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">	<span class="keyword">this</span>.intrinsicLock.lock(); </div><div class="line">	<span class="keyword">try</span>&#123;</div><div class="line">		<span class="keyword">do</span> something</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">finally</span>&#123;</div><div class="line">		<span class="keyword">this</span>.intrinsicLock.unlock();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>内部对象锁只有一个相关条件。wait 方法添加一个线程到等待集中，notifyAll/notify 方法接触等待线程的阻塞状态。即，调用wait或notifyAll等价于<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">intrinsicCondition.await(); </div><div class="line">intrinsicCondition.signalAll();</div></pre></td></tr></table></figure></p>
<p><strong>内部锁和条件存在一些局限：</strong></p>
<ol>
<li>不能中断一个正在试图获得锁的线程</li>
<li>试图获得锁时不能设定超时</li>
<li>每个锁仅有单一的条件，可能是不够的</li>
</ol>
<p><strong>Lock 和 Condition 对象、同步方法的使用的建议：</strong></p>
<ul>
<li>最好既不使用Lock/Condition 也不使用 synchronized 关键字。在许多情况下可以使用 <strong>java.util.concurrent</strong> 包中的一种机制，它会为你处理所有的加锁</li>
<li>如果 synchronized 关键字适合你的程序，那么就尽量使用它。</li>
<li>如果特别需要 Lock/Condition 结构提供的独有特性时，才使用 Lock/Condition</li>
</ul>
<p><strong>使用 synchronized 关键字修改源码</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BankSynch</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span>[] accounts;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 初始化</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> n 数组长度</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> initialBalance</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BankSynch</span><span class="params">(<span class="keyword">int</span> n ,<span class="keyword">double</span> initialBalance)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        accounts = <span class="keyword">new</span> <span class="keyword">double</span>[n];</div><div class="line">        Arrays.fill(accounts, initialBalance);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 转账操作</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> from</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> to</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> amount</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to, <span class="keyword">double</span> amount)</span> <span class="keyword">throws</span> InterruptedException</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        System.out.println(Thread.currentThread());</div><div class="line">        accounts[from] -= amount;</div><div class="line">        System.out.printf(<span class="string">"%10.2f from %d to %d"</span>, amount, from, to);</div><div class="line">        accounts[to] += amount;</div><div class="line">        System.out.printf(<span class="string">" Total Balance: %10.2f%n"</span>, getTotalBalance());</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取 accounts 数组的总金额</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">double</span> <span class="title">getTotalBalance</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">double</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">double</span> a : accounts)</div><div class="line">            sum += a;</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">return</span> accounts.length;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>还有一种是客户端锁定，不过客户端锁定是非常脆弱的，通常不推荐使用，这里就不叙述了。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://book.douban.com/subject/3146174/" target="_blank" rel="external">JAVA核心技术（卷1）原书第10版</a></p>
]]></content>
      
        <categories>
            
            <category> JAVA </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[聊聊 JAVA 异常]]></title>
      <url>/Throwable/</url>
      <content type="html"><![CDATA[<p>异常对象都是派生于Throwable 类的一个实例。</p>
<p>异常层次结构简化示意图:</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/4/26/16301c82ebcc2b92?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="异常层次结构简化示意图"></p>
<p>所有的异常都是由Throwable 继承而来，但在下一层立即分解为两个分支：Error 和 Exception</p>
<p>Error类层次结构描述了Java运行时系统的<strong>内部错误</strong>和<strong>资源耗尽错误</strong></p>
<h3 id="Exception-层次"><a href="#Exception-层次" class="headerlink" title="Exception 层次"></a>Exception 层次</h3><p>Exception 层次分解为两个分支： <strong>RuntimeException</strong> 和 <strong>其他异常</strong></p>
<h4 id="RuntimeException-异常："><a href="#RuntimeException-异常：" class="headerlink" title="RuntimeException 异常："></a>RuntimeException 异常：</h4><ol>
<li>错误的类型转换 ClassCastException </li>
<li>数组访问越界 ArrayIndexOutOfBoundsException </li>
<li>访问null指针 NullPointerException </li>
</ol>
<h4 id="不是派生于-RuntimeException-异常包括："><a href="#不是派生于-RuntimeException-异常包括：" class="headerlink" title="不是派生于 RuntimeException 异常包括："></a>不是派生于 RuntimeException 异常包括：</h4><ol>
<li>试图在文件尾部后面读取数据</li>
<li>试图打开一个不存在的文件</li>
<li>试图根据给定的字符串查找Class对象，而这个字符串表示的类并不存在</li>
</ol>
<p>Java语言规范将派生于 Error 异常或 RuntimeException 类的所有异常称为<strong>非受查(unchecked) 异常</strong>。</p>
<p>所有其他的异常称为<strong>受查(checked)异常</strong>。</p>
<h4 id="什么时候该抛出异常-throws-："><a href="#什么时候该抛出异常-throws-：" class="headerlink" title="什么时候该抛出异常 throws ："></a>什么时候该抛出异常 <strong>throws</strong> ：</h4><ol>
<li>调用一个抛出受查异常的方法</li>
<li>运行时发现错误，利用 <strong>throw</strong> 语句抛出一个受查异常</li>
<li>程序出现错误，如 ArrayIndexOutOfBoundsException 这样的非受查异常</li>
<li>Java 虚拟机和运行时库出现的内部错误</li>
</ol>
<p>子类方法中声明的受查异常并不能比超类方法中声明的异常更通用，即子类方法中可抛出更特定的异常，或者根本不抛出任何异常。特别声明：如果超类方法没有抛出任何受查异常，子类也不能抛出任何受查异常。</p>
<h4 id="自定义异常："><a href="#自定义异常：" class="headerlink" title="自定义异常："></a>自定义异常：</h4><ol>
<li>定义一个派生于Exception的类，或者派生于Exception子类的类。</li>
<li>习惯上，定义的类应该包含两个构造器。一个默认的构造器，另一个是带有详细描述信息构造器。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileFormatException</span> <span class="keyword">extends</span> <span class="title">IOException</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">FileFormatException</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">FileFormatException</span><span class="params">(String message)</span></span></div><div class="line"><span class="function">	</span>&#123;</div><div class="line">		<span class="keyword">super</span>(message);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="API-java-lang-Throwable"><a href="#API-java-lang-Throwable" class="headerlink" title="API java.lang.Throwable"></a>API java.lang.Throwable</h4><ul>
<li>Throwable() 构造一个新的Throwable 对象，这个对象没有详细的描述信息</li>
<li>Throwable(String message) 构造一个新的Throwable，这个对象带有特定的详细描述信息。习惯上，所有的派生的异常类都支持一个默认的构造器和一个带有详细信息的构造器。</li>
<li>String getMessage() 获得Throwable 对象的详细描述信息</li>
</ul>
<h4 id="异常处理小技巧"><a href="#异常处理小技巧" class="headerlink" title="异常处理小技巧"></a>异常处理小技巧</h4><p>一般异常处理最好的选择，就是将异常传递给调用者，让调用者自己去操心。</p>
<p>在catch 字句中可以抛出一个异常，这样做的目的是改变异常的类型。我们可以采用一种比较推荐的处理异常的方法，并且将原始异常设置为新异常的”原因”:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span></div><div class="line">&#123;</div><div class="line">	access the database</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span>(SQLException e)</div><div class="line">&#123;</div><div class="line">	Throwable se = <span class="keyword">new</span> ServletException(<span class="string">"database error"</span>);</div><div class="line">	se.initCause(e);</div><div class="line">	<span class="keyword">throw</span> se;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当捕获到异常时，就可以使用下面这条语句重新得到原始异常：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Throwable e = se.getCause();</div></pre></td></tr></table></figure></p>
<p><strong>使用这种包装技术，可让用户抛出子系统中的高级异常，而不会丢失原始异常的细节</strong></p>
<p>如果在一个方法中发生了一个受查异常，而不允许抛出它，那包装技术就十分有用。我们可捕获这个受查异常，并将它包装成一个运行时异常。</p>
<h4 id="finally-语句"><a href="#finally-语句" class="headerlink" title="finally 语句"></a>finally 语句</h4><p> 不管是否有异常被捕获，finally 字句中的代码都被执行。</p>
<p>当finally字句包含return 语句时，将会出现一种意想不到的结果。</p>
<p>假设利用return 语句从try语句块中退出。在方法返回前，finally字句的内容将被执行。如果finally字句中也有一个return语句，这个返回值将会覆盖原始的返回值。例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">try</span>&#123;</div><div class="line">        <span class="keyword">return</span> n*n;</div><div class="line">    &#125;<span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="number">2</span> == n)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果调用f(2)  ，try语句返回结果为4，然而在方法返回前，要执行finally字句。finally字句使得方法返回0。这个返回值覆盖了原先的返回值4。所以调用 f(2) 返回的值为 <strong>0</strong>。</p>
<h3 id="JAVA-SE7-关闭资源的处理"><a href="#JAVA-SE7-关闭资源的处理" class="headerlink" title="JAVA SE7 关闭资源的处理"></a>JAVA SE7 关闭资源的处理</h3><p>待资源的try 语句(try-with-resources) 的最简形式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>(Resource res = ...)</div><div class="line">&#123;</div><div class="line">	work with res</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>try 块退出时，会自动调用res.close()</strong></p>
<p>指定多个资源：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>(Scanner in = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> FileInputStream(<span class="string">"/usr/shar/dict/words"</span>),<span class="string">"UTF-8"</span>);</div><div class="line">        PrintWriter out = <span class="keyword">new</span> PrintWriter(<span class="string">"out.txt"</span>))&#123;</div><div class="line">            <span class="keyword">while</span> (in.hasNext())</div><div class="line">            out.println(in.next().toUpperCase());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>不管这个块如何退出，in 和 out 都会关闭。</p>
<p>常规方式手动编程，就需要两个嵌套的try/finally 语句。</p>
<h3 id="堆栈轨迹-stack-trace"><a href="#堆栈轨迹-stack-trace" class="headerlink" title="堆栈轨迹(stack trace)"></a>堆栈轨迹(stack trace)</h3><p>堆栈轨迹是一个方法调用过程的列表，它包含了程序执行过程中方法调用的特定位置。</p>
<h4 id="访问堆栈轨迹的文本描述信息"><a href="#访问堆栈轨迹的文本描述信息" class="headerlink" title="访问堆栈轨迹的文本描述信息"></a>访问堆栈轨迹的文本描述信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Throwable t = <span class="keyword">new</span> Throwable();</div><div class="line">StackTraceElement[] frames = t.getStackTrace();</div><div class="line"><span class="keyword">for</span> (StackTraceElement frame : frames)&#123;</div><div class="line">	analyze frame</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>StackTraceElement</strong> 类含有能够获得文件名和当前执行的代码行号的方法。同时，还含有能够获得类名和方法名的方法。</p>
<p>静态的 <strong>Thread.getAllStackTrace</strong> 方法，它可以产生所有线程的堆栈轨迹。例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Map&lt;Thread, StackTraceElement[]&gt; map = Thread.getAllStackTraces();</div><div class="line"><span class="keyword">for</span> (Thread t : map.keySet())&#123;</div><div class="line">    StackTraceElement[] frames = map.get(t);</div><div class="line">    analyze frames</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="打印一个递归阶乘的函数的堆栈情况"><a href="#打印一个递归阶乘的函数的堆栈情况" class="headerlink" title="打印一个递归阶乘的函数的堆栈情况"></a>打印一个递归阶乘的函数的堆栈情况</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackTraceTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 计算n的阶乘</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> n</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        System.out.println(<span class="string">"factorial("</span> + n + <span class="string">"):"</span>);</div><div class="line">        Throwable t = <span class="keyword">new</span> Throwable();</div><div class="line">        StackTraceElement[] frames = t.getStackTrace();</div><div class="line">        <span class="keyword">for</span> (StackTraceElement f: frames)</div><div class="line">            System.out.println(f);</div><div class="line">        <span class="keyword">int</span> r;</div><div class="line">        <span class="keyword">if</span> (n&lt;=<span class="number">1</span>)</div><div class="line">            r =<span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            r = n * factorial(n-<span class="number">1</span>);</div><div class="line">        System.out.println(<span class="string">"return "</span> + r);</div><div class="line">        <span class="keyword">return</span> r;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        System.out.print(<span class="string">"Enter n : "</span>);</div><div class="line">        <span class="keyword">int</span> n = in.nextInt();</div><div class="line">        factorial(n);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>计算factorial(3),打印一下内容</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">factorial(<span class="number">3</span>):</div><div class="line">javabook.StackTraceTest.factorial(StackTraceTest.java:<span class="number">15</span>)</div><div class="line">javabook.StackTraceTest.main(StackTraceTest.java:<span class="number">32</span>)</div><div class="line">factorial(<span class="number">2</span>):</div><div class="line">javabook.StackTraceTest.factorial(StackTraceTest.java:<span class="number">15</span>)</div><div class="line">javabook.StackTraceTest.factorial(StackTraceTest.java:<span class="number">23</span>)</div><div class="line">javabook.StackTraceTest.main(StackTraceTest.java:<span class="number">32</span>)</div><div class="line">factorial(<span class="number">1</span>):</div><div class="line">javabook.StackTraceTest.factorial(StackTraceTest.java:<span class="number">15</span>)</div><div class="line">javabook.StackTraceTest.factorial(StackTraceTest.java:<span class="number">23</span>)</div><div class="line">javabook.StackTraceTest.factorial(StackTraceTest.java:<span class="number">23</span>)</div><div class="line">javabook.StackTraceTest.main(StackTraceTest.java:<span class="number">32</span>)</div><div class="line"><span class="keyword">return</span> <span class="number">1</span></div><div class="line"><span class="keyword">return</span> <span class="number">2</span></div><div class="line"><span class="keyword">return</span> <span class="number">6</span></div></pre></td></tr></table></figure></p>
<h3 id="使用异常小技巧"><a href="#使用异常小技巧" class="headerlink" title="使用异常小技巧"></a>使用异常小技巧</h3><h4 id="异常处理不能代替简单的测试"><a href="#异常处理不能代替简单的测试" class="headerlink" title="异常处理不能代替简单的测试"></a>异常处理不能代替简单的测试</h4><p>与执行简单的测试相比，捕获异常所花费的时间大大超过前者。因此使用异常的基本规则是，旨在异常情况下使用异常机制。</p>
<h4 id="不要过分地细化异常"><a href="#不要过分地细化异常" class="headerlink" title="不要过分地细化异常"></a>不要过分地细化异常</h4><p>将整个任务包装在一个try块中，这样，当任何一个操作出现问题时，整个任务都可以取消。</p>
<h4 id="利用异常层次结构"><a href="#利用异常层次结构" class="headerlink" title="利用异常层次结构"></a>利用异常层次结构</h4><ul>
<li>不要只抛出 RuntimeException 异常。应该寻找更加适当的子类或创建自己的异常类。</li>
<li>不要只捕获Throwable 异常，否则，会使程序代码更难读、更难维护</li>
<li>考虑受查异常和非受查异常的区别。</li>
<li>将一种异常转换成另一种更加适合的异常时不要犹豫。</li>
</ul>
<h4 id="不要压制异常"><a href="#不要压制异常" class="headerlink" title="不要压制异常"></a>不要压制异常</h4><p>在java中，往往强化地倾向关闭异常。</p>
<h4 id="在检测错误时，“苛刻”要比放任更好"><a href="#在检测错误时，“苛刻”要比放任更好" class="headerlink" title="在检测错误时，“苛刻”要比放任更好"></a>在检测错误时，“苛刻”要比放任更好</h4><p>例如，当栈空时，Stack.pop 是要返回一个null，还是抛出一个异常？我们认为：在出错的地方抛出一个  EmptyStackException异常要比在后面抛出一个 NullPointerException 异常更好。</p>
<h4 id="不要羞于传递异常"><a href="#不要羞于传递异常" class="headerlink" title="不要羞于传递异常"></a>不要羞于传递异常</h4><p>让高层次的方法通知用户发生了错误，或者放弃不成功的命令更加适宜。                                   </p>
<h4 id="5-和-6-可以归纳为“早抛出，晚捕获”。"><a href="#5-和-6-可以归纳为“早抛出，晚捕获”。" class="headerlink" title="5 和 6 可以归纳为“早抛出，晚捕获”。"></a>5 和 6 可以归纳为“早抛出，晚捕获”。</h4><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://book.douban.com/subject/3146174/" target="_blank" rel="external">JAVA核心技术（卷1）原书第10版</a></p>
]]></content>
      
        <categories>
            
            <category> JAVA </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浅谈反射]]></title>
      <url>/reflection/</url>
      <content type="html"><![CDATA[<p>反射：能够分析类能力的程序称为反射。反射是一种功能强大且复杂的机制。使用它的主要人员是工具构造者，而不是应用程序员。</p>
<p>反射机制：当程序无法获知对象类型时，在运行期间动态获取类的所有属性和方法。<br><a id="more"></a></p>
<h3 id="反射机制作用"><a href="#反射机制作用" class="headerlink" title="反射机制作用"></a>反射机制作用</h3><ol>
<li>在运行时分析类的能力</li>
<li>在运行时查看对象</li>
<li>实现通用的数组操作代码</li>
</ol>
<h3 id="反射机制的实现"><a href="#反射机制的实现" class="headerlink" title="反射机制的实现"></a>反射机制的实现</h3><p>采用Class类和java.lang.reflect 类库一起实现 &lt;反射&gt;机制</p>
<ol>
<li>Class 类： 代表一个目标类。</li>
<li>Field 类： 代表目标类的成员变量。</li>
<li>Method 类： 代表目标类的方法。</li>
<li>Constructor 类： 代表目标类的构造方法。</li>
<li>Array 类： 提供了动态创建数组，以及访问数组的元素的静态方法。</li>
</ol>
<h4 id="Class-类"><a href="#Class-类" class="headerlink" title="Class 类"></a>Class 类</h4><p>​    在程序运行期间，Java运行时系统始终为所有的对象维护一个被称为运行时的类型表示。这个信息跟踪着每个对象所属的类。虚拟机利用运行时类型信息选择相应的方法执行。</p>
<p>​    然而，可以通过专门的Java类访问这些信息。保存这些信息的类被成为Class，这个名字很容易让人混淆。Object 类中的getClass() 方法将返回一个Class类型的实例。</p>
<p>获取Class对象的三种方法</p>
<ul>
<li>如果类在一个包里，包的名字也作为做类名的一部分。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Random generator = <span class="keyword">new</span> Random();</div><div class="line">Class cl = generator.getClass();</div><div class="line">System.out.println(cl.getName());<span class="comment">//java.util.Random</span></div></pre></td></tr></table></figure>
<ul>
<li><p>如果类名保存字符串中，并可在运行时该变，即可使用这种方法。forName() 方法会爆<strong>ClassNotFoundException</strong> 异常，所以需要进行异常处理。</p>
<p> Class.forName() 内部通过反射API根据目标类名将类<strong>手动加载</strong>到内存中，称为<strong>类加载器加载方法</strong>。加载过程中会把目标类的static方法，变量，代码块加载到JVM，<strong>注意此时尚未创建对象实例</strong></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String className = <span class="string">"java.util.Random"</span>;</div><div class="line">Class cl = <span class="class"><span class="keyword">class</span>.<span class="title">forName</span>(<span class="title">className</span>)</span>;</div></pre></td></tr></table></figure>
<ul>
<li>如果T是任意的Java类型（或void 关键字），T.class 将代表匹配的类对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Class cl = Random.class;</div></pre></td></tr></table></figure>
<h4 id="获取构造器–Constructor-类"><a href="#获取构造器–Constructor-类" class="headerlink" title="获取构造器–Constructor 类"></a>获取构造器–Constructor 类</h4><ul>
<li><code>Constructor[] getConstructors()</code>：获得<strong>所有public</strong>构造器；</li>
<li><code>Constructor[] getDeclaredConstructors()</code>：获得<strong>所有访问权限</strong>的构造器</li>
<li><code>Constructor getConstructor(Class[] params)</code>：根据指定参数获得对应构造器；</li>
<li><code>Constructor getDeclaredConstructor(Class[] params)</code>：根据指定参数获得对应构造器；</li>
</ul>
<h4 id="获得方法–Method-类"><a href="#获得方法–Method-类" class="headerlink" title="获得方法–Method 类"></a>获得方法–Method 类</h4><ul>
<li><code>Method[] getMethods()</code>：获得<strong>所有public</strong>方法；</li>
<li><code>Method[] getDeclaredMethods()</code>：获得<strong>所有访问权限</strong>的方法；</li>
<li><code>Method getMethod(String name, Class[] params)</code>：根据方法签名获取类自身对应<strong>public方法</strong>，或者从基类继承和接口实现的对应<strong>public方法</strong>；</li>
<li><code>Method getDeclaredMethod(String name, Class[] params)</code>：根据方法签名获得对应的<strong>类自身声明方法</strong>，<strong>访问权限不限</strong>；</li>
</ul>
<h4 id="获得变量–Field-类"><a href="#获得变量–Field-类" class="headerlink" title="获得变量–Field 类"></a>获得变量–Field 类</h4><ul>
<li><code>Field[] getFields()</code>：获得类中<strong>所有public</strong>变量</li>
<li><code>Field[] getDeclaredFields()</code>：获得类中<strong>所有访问权限</strong>变量</li>
<li><code>Field getField(String name)</code>：根据变量名得到对应的public变量</li>
<li><code>Field getDeclaredField(String name)</code>：根据变量名获得对应的变量，<strong>访问权限不限</strong>；</li>
</ul>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>我们来个例子加深一下印象。</p>
<h4 id="打印一个类的所有构造函数"><a href="#打印一个类的所有构造函数" class="headerlink" title="打印一个类的所有构造函数"></a>打印一个类的所有构造函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printConstructors</span><span class="params">(Class cl)</span></span></div><div class="line"><span class="function">   </span>&#123;</div><div class="line">       <span class="comment">//返回包含Constructor 对象的数组，其中包含了Class对象的所有构造器</span></div><div class="line">       Constructor[] constructors = cl.getDeclaredConstructors();</div><div class="line"></div><div class="line">       <span class="keyword">for</span> (Constructor c: constructors) &#123;</div><div class="line">           <span class="comment">//String getName()</span></div><div class="line">           <span class="comment">//返回一个用于描述构造器、方法或域名的字符串</span></div><div class="line">           String name = c.getName();</div><div class="line">           System.out.print(<span class="string">"    "</span>);</div><div class="line">           String modifiers = Modifier.toString(c.getModifiers());</div><div class="line">           <span class="keyword">if</span> (modifiers.length()&gt;<span class="number">0</span>)</div><div class="line">               System.out.print(modifiers+ <span class="string">"  "</span>);</div><div class="line">           System.out.print(name+<span class="string">"("</span>);</div><div class="line">           <span class="comment">//Class[] getParameterTypes() (在Constructor 和 Method 类中)</span></div><div class="line">           <span class="comment">//返回一个用于描述参数类型的Class对象数组</span></div><div class="line">           printParameterType(c.getParameterTypes());</div><div class="line">           System.out.println(<span class="string">");"</span>);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h4 id="打印一个类的所有方法"><a href="#打印一个类的所有方法" class="headerlink" title="打印一个类的所有方法"></a>打印一个类的所有方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMethods</span><span class="params">(Class cl)</span></span></div><div class="line"><span class="function">   </span>&#123;</div><div class="line">       <span class="comment">//返回包含Method 对象的数组，返回这个类或接口的全部方法，但不包括由超类继承了的方法</span></div><div class="line">       Method[] methods = cl.getDeclaredMethods();</div><div class="line">       <span class="keyword">for</span> (Method m:methods) &#123;</div><div class="line">           <span class="comment">//Class getReturnType() (在 Method 类中)</span></div><div class="line">           <span class="comment">//返回一个用于描述返回类型的Class对象</span></div><div class="line">           Class retType = m.getReturnType();</div><div class="line">           String name = m.getName();</div><div class="line"></div><div class="line">           System.out.print(<span class="string">"    "</span>);</div><div class="line">           <span class="comment">//打印修饰符、返回类型和方法名称</span></div><div class="line">           String modifiers =Modifier.toString(m.getModifiers());</div><div class="line">           <span class="keyword">if</span> (modifiers.length()&gt;<span class="number">0</span>)</div><div class="line">               System.out.print(modifiers+<span class="string">" "</span>);</div><div class="line">           System.out.print(retType.getName()+<span class="string">" "</span>+ name + <span class="string">"("</span>);</div><div class="line"></div><div class="line">           printParameterType(m.getParameterTypes());</div><div class="line">           System.out.println(<span class="string">");"</span>);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h4 id="打印一个类的所有字段"><a href="#打印一个类的所有字段" class="headerlink" title="打印一个类的所有字段"></a>打印一个类的所有字段</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printFields</span><span class="params">(Class cl)</span></span></div><div class="line"><span class="function">   </span>&#123;</div><div class="line">       <span class="comment">//Field[] getDeclaredFields()</span></div><div class="line">       <span class="comment">//返回包含Field 对象的数组，这些对象记录了这个类的全部域</span></div><div class="line">       Field[] fields = cl.getDeclaredFields();</div><div class="line"></div><div class="line">       <span class="keyword">for</span> (Field f : fields)&#123;</div><div class="line">           Class type = f.getType();</div><div class="line">           String name = f.getName();</div><div class="line">           System.out.print(<span class="string">"    "</span>);</div><div class="line">           String modifiers = Modifier.toString(f.getModifiers());</div><div class="line">           <span class="keyword">if</span> (modifiers.length()&gt;<span class="number">0</span>)</div><div class="line">               System.out.print(modifiers+<span class="string">"  "</span>);</div><div class="line">           System.out.println(type.getName()+<span class="string">" "</span>+ name+ <span class="string">";"</span>);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h4 id="打印方法的参数类型"><a href="#打印方法的参数类型" class="headerlink" title="打印方法的参数类型"></a>打印方法的参数类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printParameterType</span><span class="params">(Class[] paramTypes)</span></span></div><div class="line"><span class="function">   </span>&#123;</div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;paramTypes.length;j++) &#123;</div><div class="line">           <span class="keyword">if</span> (j&gt;<span class="number">0</span>)</div><div class="line">               System.out.print(<span class="string">", "</span>);</div><div class="line">           System.out.print(paramTypes[j].getName());</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line"><span class="function">   </span>&#123;</div><div class="line">       String name;</div><div class="line">       <span class="keyword">if</span> (args.length&gt;<span class="number">0</span>)</div><div class="line">           name = args[<span class="number">0</span>];</div><div class="line">       <span class="keyword">else</span> &#123;</div><div class="line">           Scanner in = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">           System.out.println(<span class="string">"Enter class name(e.g java.util.Date): "</span>);</div><div class="line">           name = in.next();</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           <span class="comment">//print class name and superclass name (if != object)</span></div><div class="line">           <span class="comment">//调用Class 的静态方法 forName 获得类名对应的Class 对象</span></div><div class="line">           Class cl = Class.forName(name);</div><div class="line">           <span class="comment">//获取父类所对应的Class 对象</span></div><div class="line">           Class supercl = cl.getSuperclass();</div><div class="line">           <span class="comment">//返回对应modifiers 中位设置的修饰符的字符串表示</span></div><div class="line">           String modifiers = Modifier.toString(cl.getModifiers());</div><div class="line"></div><div class="line">           <span class="keyword">if</span> (modifiers.length()&gt;<span class="number">0</span>)</div><div class="line">               System.out.print(modifiers+<span class="string">"  "</span>);</div><div class="line">           System.out.print(<span class="string">"class "</span>+ name);</div><div class="line">           <span class="comment">//判断是否有继承父类</span></div><div class="line">           <span class="keyword">if</span> (supercl != <span class="keyword">null</span>  &amp;&amp; supercl != Object.class)</div><div class="line">               System.out.print(<span class="string">"  extends "</span>+ supercl.getName());</div><div class="line"></div><div class="line">           System.out.print(<span class="string">"\n&#123;\n"</span>);</div><div class="line">           printConstructors(cl);</div><div class="line">           System.out.println();</div><div class="line">           printMethods(cl);</div><div class="line">           System.out.println();</div><div class="line">           printFields(cl);</div><div class="line">           System.out.println(<span class="string">"&#125;"</span>);</div><div class="line"></div><div class="line"></div><div class="line">       &#125;<span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</div><div class="line">           ex.printStackTrace();</div><div class="line">       &#125;</div><div class="line">       System.exit(<span class="number">0</span>);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>   <a href="https://book.douban.com/subject/3146174/" target="_blank" rel="external">JAVA核心技术（卷1）原书第10版</a></p>
<p>   <a href="https://segmentfault.com/a/1190000009016560" target="_blank" rel="external">反射笔记</a></p>
]]></content>
      
        <categories>
            
            <category> JAVA </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[机器学习之识别验证码]]></title>
      <url>/Tesseract/</url>
      <content type="html"><![CDATA[<h3 id="下载-tesseract-ocr"><a href="#下载-tesseract-ocr" class="headerlink" title="下载 tesseract_ocr"></a>下载 tesseract_ocr</h3><h4 id="使用composer下载，tesseract-ocr"><a href="#使用composer下载，tesseract-ocr" class="headerlink" title="使用composer下载，tesseract_ocr"></a>使用composer下载，<a href="https://github.com/thiagoalessio/tesseract-ocr-for-php" target="_blank" rel="external">tesseract_ocr</a></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ composer require thiagoalessio/tesseract_ocr</div></pre></td></tr></table></figure>
<h4 id="ocr-测试"><a href="#ocr-测试" class="headerlink" title="ocr 测试"></a>ocr 测试</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require_once</span> <span class="string">'./vendor/autoload.php'</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">thiagoalessio</span>\<span class="title">TesseractOCR</span>\<span class="title">TesseractOCR</span>;</div><div class="line"></div><div class="line"><span class="keyword">echo</span> (<span class="keyword">new</span> TesseractOCR(<span class="string">'./1.jpg'</span>))</div><div class="line">    -&gt;lang(<span class="string">'eng'</span>)</div><div class="line">    -&gt;run();</div></pre></td></tr></table></figure>
<h3 id="训练样本数据"><a href="#训练样本数据" class="headerlink" title="训练样本数据"></a>训练样本数据</h3><h4 id="安装-Tesseract"><a href="#安装-Tesseract" class="headerlink" title="安装 Tesseract"></a>安装 Tesseract</h4><p>笔者这里是直接自动安装，没选择编译安装 </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt install tesseract-ocr</div></pre></td></tr></table></figure>
<h4 id="下载图片"><a href="#下载图片" class="headerlink" title="下载图片"></a>下载图片</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPicture</span><span class="params">($uri)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;<span class="number">100</span>;$i++) &#123;</div><div class="line">        $img = file_get_contents($uri);</div><div class="line">        $filename = <span class="string">'./test/'</span>.$i.<span class="string">'.gif'</span>;</div><div class="line">        file_put_contents($filename,$img);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下载之后有点小问题，因为笔者电脑少了一个gif库，后面处理的时候总是有点问题。所以我用软件将 <strong>gif</strong> 转成了 <strong>png</strong> 格式.</p>
<h4 id="安装-jTessBoxEditor"><a href="#安装-jTessBoxEditor" class="headerlink" title="安装 jTessBoxEditor"></a>安装 jTessBoxEditor</h4><ol>
<li><p><a href="https://sourceforge.net/projects/vietocr/files/jTessBoxEditor/" target="_blank" rel="external">下载地址</a> 笔者下载的是 <a href="https://sourceforge.net/projects/vietocr/files/jTessBoxEditor/jTessBoxEditor-2.0-Beta.zip/download" target="_blank" rel="external">jTessBoxEditor-2.0-Beta.zip</a></p>
</li>
<li><p>解压   </p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ unzip jTessBoxEditor-2.0-Beta.zip</div></pre></td></tr></table></figure>
<ol>
<li>运行</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ java -Xms128m -Xmx1024m -jar jTessBoxEditor.jar</div></pre></td></tr></table></figure>
<p><img src="https://static.huizhe.xyz/article-images/jTessBoxEditor.png" alt="jTessBoxEditor"></p>
<h4 id="图片转换成-tiff-格式"><a href="#图片转换成-tiff-格式" class="headerlink" title="图片转换成 tiff 格式"></a>图片转换成 tiff 格式</h4><p>因为jTessBoxEditor只能处理.tiff后缀的文件，因此我们需要将验证码图片转化为.tiff后缀，这里我们使用ImageMagick的convert工具进行转化，首先安装ImageMagick：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install imagemagick</div></pre></td></tr></table></figure>
<p>shell 脚本批量转换当前目录下的图片</p>
<p>创建 tran.sh 文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim tran.sh</div></pre></td></tr></table></figure>
<p>tran.sh 文件内容</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">~/bin/sh</span></div><div class="line">for file in `ls *.jpg`</div><div class="line">    do</div><div class="line">        name=$&#123;file%.*&#125;</div><div class="line">        convert $file "../tiff/"$name".tiff"</div><div class="line">    done</div></pre></td></tr></table></figure>
<p>图片转换</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./tran.sh</div></pre></td></tr></table></figure>
<h4 id="将-tiff-文件合并成-tif-文件"><a href="#将-tiff-文件合并成-tif-文件" class="headerlink" title="将 .tiff 文件合并成 .tif 文件"></a>将 .tiff 文件合并成 .tif 文件</h4><p>打开 <strong>jTessBoxEditor</strong> ，点击界面上的Tools/Merge TIFF，将之前生成的 <strong>.tiff</strong> 文件合并成一个 <strong>.tif</strong>文件</p>
<p><strong>官方定义 tif 文件的命名格式为：[lang].[fontname].exp[num].tif</strong></p>
<p><img src="https://static.huizhe.xyz/article-images/marge.png" alt="marge"></p>
<p><img src="https://static.huizhe.xyz/article-images/rename.png" alt="rename"></p>
<h4 id="生成-box-文件"><a href="#生成-box-文件" class="headerlink" title="生成 .box 文件"></a>生成 .box 文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ tesseract eng.test.exp0.tif eng.test.exp0 -l eng -psm 7 batch.nochop makebox</div></pre></td></tr></table></figure>
<h4 id="使用jTessBoxEditor校正字符"><a href="#使用jTessBoxEditor校正字符" class="headerlink" title="使用jTessBoxEditor校正字符"></a>使用jTessBoxEditor校正字符</h4><p>打开刚才生成的eng.test.exp0.tif 文件，在左侧的Char列输入正确的值，调整x，y，w，h的值。可选择工具栏上的merge 和 split 对结果进行合并和拆分。点击下方中间的翻页查看下一张验证码。</p>
<p><img src="https://static.huizhe.xyz/article-images/correcting.png" alt="correcting"></p>
<h3 id="自制语言库"><a href="#自制语言库" class="headerlink" title="自制语言库"></a>自制语言库</h3><h4 id="定义字体特征文件"><a href="#定义字体特征文件" class="headerlink" title="定义字体特征文件"></a>定义字体特征文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> <span class="built_in">test</span> 0 0 0 0 0 &gt; font_properties</div></pre></td></tr></table></figure>
<p> 语法： fontname italic bold fixed serif fraktur</p>
<p><strong>fontname为字体名称，italic为斜体，bold为黑体字，fixed为默认字体，serif为衬线字体，fraktur德文黑字体，1和0代表有和无，精细区分时可使用。</strong></p>
<h4 id="生成字符特征文件"><a href="#生成字符特征文件" class="headerlink" title="生成字符特征文件"></a>生成字符特征文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ tesseract eng.test.exp0.tif eng.test.exp0 -l eng -psm 7 nobatch box.train</div></pre></td></tr></table></figure>
<h4 id="产生字符集"><a href="#产生字符集" class="headerlink" title="产生字符集"></a>产生字符集</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">unicharset_extractor eng.test.exp0.box</div></pre></td></tr></table></figure>
<h4 id="生成shapetable"><a href="#生成shapetable" class="headerlink" title="生成shapetable"></a>生成shapetable</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ shapeclustering -F font_properties -U unicharset -O eng.test.exp0 eng.test.exp0.tr</div></pre></td></tr></table></figure>
<h4 id="生成聚集字符特征文件"><a href="#生成聚集字符特征文件" class="headerlink" title="生成聚集字符特征文件"></a>生成聚集字符特征文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mftraining -F font_properties -U unicharset -O eng.test.exp0 eng.test.exp0.tr</div></pre></td></tr></table></figure>
<h4 id="生成字符形状正常变化特征文件normproto"><a href="#生成字符形状正常变化特征文件normproto" class="headerlink" title="生成字符形状正常变化特征文件normproto"></a>生成字符形状正常变化特征文件normproto</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> cntraining eng.test.exp0.tr</div><div class="line">$ combine_tessdata <span class="built_in">test</span>.</div></pre></td></tr></table></figure>
<h4 id="给inttemp-normproto-pffmtable-shapetable-unicharset-添加前缀-“test-”。"><a href="#给inttemp-normproto-pffmtable-shapetable-unicharset-添加前缀-“test-”。" class="headerlink" title="给inttemp,normproto,pffmtable,shapetable,unicharset 添加前缀 “test.”。"></a>给inttemp,normproto,pffmtable,shapetable,unicharset 添加前缀 “test.”。</h4><h4 id="生成语言库"><a href="#生成语言库" class="headerlink" title="生成语言库"></a>生成语言库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$ combine_tessdata <span class="built_in">test</span>.</div><div class="line">Combining tessdata files</div><div class="line">TessdataManager combined tesseract data files.</div><div class="line">Offset <span class="keyword">for</span> <span class="built_in">type</span>  0 (test.config                ) is -1</div><div class="line">Offset <span class="keyword">for</span> <span class="built_in">type</span>  1 (test.unicharset            ) is 140</div><div class="line">Offset <span class="keyword">for</span> <span class="built_in">type</span>  2 (test.unicharambigs         ) is -1</div><div class="line">Offset <span class="keyword">for</span> <span class="built_in">type</span>  3 (test.inttemp               ) is 891</div><div class="line">Offset <span class="keyword">for</span> <span class="built_in">type</span>  4 (test.pffmtable             ) is 137813</div><div class="line">Offset <span class="keyword">for</span> <span class="built_in">type</span>  5 (test.normproto             ) is 137935</div><div class="line">Offset <span class="keyword">for</span> <span class="built_in">type</span>  6 (test.punc-dawg             ) is -1</div><div class="line">Offset <span class="keyword">for</span> <span class="built_in">type</span>  7 (test.word-dawg             ) is -1</div><div class="line">Offset <span class="keyword">for</span> <span class="built_in">type</span>  8 (test.number-dawg           ) is -1</div><div class="line">Offset <span class="keyword">for</span> <span class="built_in">type</span>  9 (test.freq-dawg             ) is -1</div><div class="line">Offset <span class="keyword">for</span> <span class="built_in">type</span> 10 (test.fixed-length-dawgs    ) is -1</div><div class="line">Offset <span class="keyword">for</span> <span class="built_in">type</span> 11 (test.cube-unicharset       ) is -1</div><div class="line">Offset <span class="keyword">for</span> <span class="built_in">type</span> 12 (test.cube-word-dawg        ) is -1</div><div class="line">Offset <span class="keyword">for</span> <span class="built_in">type</span> 13 (test.shapetable            ) is 139557</div><div class="line">Offset <span class="keyword">for</span> <span class="built_in">type</span> 14 (test.bigram-dawg           ) is -1</div><div class="line">Offset <span class="keyword">for</span> <span class="built_in">type</span> 15 (test.unambig-dawg          ) is -1</div><div class="line">Offset <span class="keyword">for</span> <span class="built_in">type</span> 16 (test.params-model          ) is -1</div><div class="line">Output test.traineddata created successfully.</div></pre></td></tr></table></figure>
<h4 id="语言库存到tesseract中"><a href="#语言库存到tesseract中" class="headerlink" title="语言库存到tesseract中"></a>语言库存到tesseract中</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo cp test.traineddata /usr/share/tesseract-ocr/tessdata/</div></pre></td></tr></table></figure>
<h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; <span class="number">100</span>; $i++) &#123;</div><div class="line">  <span class="keyword">echo</span> $i.<span class="string">":"</span>.(<span class="keyword">new</span> TesseractOCR(<span class="string">'./test/'</span>.$i.<span class="string">'.jpg'</span>))</div><div class="line">         -&gt;lang(<span class="string">'test'</span>)</div><div class="line">         -&gt;run();</div><div class="line">  <span class="keyword">echo</span> <span class="string">'\r'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; <span class="number">100</span>; $i++) &#123;</div><div class="line">  <span class="keyword">echo</span> $i.<span class="string">":"</span>.(<span class="keyword">new</span> TesseractOCR(<span class="string">'./test/'</span>.$i.<span class="string">'.jpg'</span>))</div><div class="line">         -&gt;lang(<span class="string">'eng'</span>)</div><div class="line">         -&gt;run();</div><div class="line">  <span class="keyword">echo</span> <span class="string">'\r'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>笔者用100张照片去对比，结果如下</p>
<p><img src="https://static.huizhe.xyz/article-images/contrast.png" alt="contrast"><br>因为eng是还有匹配字母，所有速度和正确率方面有所影响。test我主要是校正数字，所以速度上相对有优势，加上训练数据不大，正确率不是很高。</p>
<table>
<thead>
<tr>
<th>语言库</th>
<th>eng</th>
<th>test</th>
</tr>
</thead>
<tbody>
<tr>
<td>识别率</td>
<td>52%</td>
<td>69%</td>
</tr>
</tbody>
</table>
<p><strong>Tesseract</strong> 识别的图片如果太脏，需要清洗一下，否则极影响识别率。</p>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[软考爬虫]]></title>
      <url>/Software/</url>
      <content type="html"><![CDATA[<p>最近和同学在一起准备报考  <strong>计算机技术与软件专业技术资格（水平）考试</strong>，不过因为报名时间还没出，所以一直得关注网站是否已经可以报考。</p>
<p>刚好又在弄php的爬虫，所以就顺手做一个爬虫，再搭配一下Twilio做一个预警通知，就不用关注网站了，这样就轻松了很多。<br><a id="more"></a></p>
<p>注意：这里爬虫访问的是 <a href="http://www.gdrsks.gov.cn/" target="_blank" rel="external">广东人事考试网</a></p>
<p>使用工具：<a href="https://doc.querylist.cc/" target="_blank" rel="external">QueryList</a>   <a href="https://www.twilio.com" target="_blank" rel="external">Twilio</a></p>
<p>先放一张成品图. 这里还没出2018的，所以用2017的测试<br><img src="https://static.huizhe.xyz/article-images/Achievements.jpg" alt="Achievements"></p>
<h2 id="Twilio"><a href="#Twilio" class="headerlink" title="Twilio"></a>Twilio</h2><p>Twilio是一个做成开放插件的电话跟踪服务（call-tracking service）。美国当地时间2016年6月23日，云通讯公司Twilio在纽约证券交易所上市（来自于百度百科）。Twilio官网从国内访问的时候，可能会因为一些你懂的原因而导致无法访问，这时你就得学习一下怎么科学上网了。</p>
<h2 id="QueryList"><a href="#QueryList" class="headerlink" title="QueryList"></a>QueryList</h2><p>QueryList是一个基于phpQuery的PHP通用列表采集类,得益于phpQuery，让使用QueryList几乎没有任何学习成本，只要会CSS3选择器就可以轻松使用QueryList了，它让PHP做采集像jQuery选择元素一样简单。</p>
<h2 id="Twilio注册"><a href="#Twilio注册" class="headerlink" title="Twilio注册"></a>Twilio注册</h2><p>注册方法请移步 <a href="https://cuiqingcai.com/5696.html" target="_blank" rel="external">崔庆才</a> 大神的博客，这里就不重复了。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>因为是PHP版本的，所以用composer进行安装</p>
<ul>
<li><p>Twilio     PHP &gt;= 5.3</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer require twilio/sdk</div></pre></td></tr></table></figure>
</li>
<li><p>QueryList   PHP &gt;= 7.0</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer require jaeger/querylist</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Twilio-代码"><a href="#Twilio-代码" class="headerlink" title="Twilio 代码"></a>Twilio 代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">require_once &apos;./vendor/autoload.php&apos;;</div><div class="line">use Twilio\Rest\Client;</div><div class="line">function SendSMS($body)</div><div class="line">&#123;</div><div class="line">    $account_sid = &quot;your account sid&quot;;</div><div class="line">    $auth_token = &quot;your token&quot;;</div><div class="line"></div><div class="line">    $client = new Client($account_sid, $auth_token);</div><div class="line"></div><div class="line">    $messages = $client-&gt;messages-&gt;create(</div><div class="line">        &quot;+接收者的号码&quot;,</div><div class="line">        array(</div><div class="line">            &apos;from&apos; =&gt; &apos;+twilio给你的号码&apos;,</div><div class="line">            &apos;body&apos; =&gt; $body</div><div class="line">        )</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="QueryList-代码"><a href="#QueryList-代码" class="headerlink" title="QueryList 代码"></a>QueryList 代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">require_once &apos;./vendor/autoload.php&apos;;</div><div class="line">use QL\QueryList;</div><div class="line">function getHtmlData($uri, $rules, $range)</div><div class="line">&#123;</div><div class="line">    $html = QueryList::get($uri)-&gt;getHtml();</div><div class="line">    $data = QueryList::html($html)-&gt;rules($rules)-&gt;range($range)</div><div class="line">                                  -&gt;query()-&gt;getData();</div><div class="line">    return $data-&gt;all();</div><div class="line">&#125;</div><div class="line">function send($uri)</div><div class="line">&#123;</div><div class="line">    $rules = array(</div><div class="line">        &apos;content&apos; =&gt; array(&apos;p&apos;,&apos;text&apos;),</div><div class="line">        &apos;link&apos;    =&gt; array(&apos;a&apos;,&apos;href&apos;)</div><div class="line">    );</div><div class="line">    $range = &apos;#fontzoom&apos;;</div><div class="line">    $dataArray = getHtmlData($uri, $rules, $range);</div><div class="line">    $time = explode(&apos;：&apos;,explode(&apos;。&apos;,$dataArray[0][&apos;content&apos;])[0])[2];</div><div class="line">    $body = $time.&apos;。报名入口：&apos;.$dataArray[0][&apos;link&apos;];</div><div class="line">    SendSMS($body);</div><div class="line">&#125;</div><div class="line">$uri = &quot;http://www.gdrsks.gov.cn/HREducation/ExamList.aspx?ecid=2&amp;nodeid=1&amp;ekid=19&quot;;</div><div class="line">$rules = array(</div><div class="line">    &apos;date&apos;      =&gt;  array(&apos;.date&apos;,&apos;text&apos;),</div><div class="line">    &apos;content&apos;   =&gt;  array(&apos;.tit&apos;,&apos;text&apos;),</div><div class="line">    &apos;link&apos;      =&gt;  array(&apos;.tit&apos;,&apos;href&apos;)</div><div class="line">);</div><div class="line">$range = &apos;#mainContent&gt;div.wBd&gt;ul&gt;li&apos;;</div><div class="line">$data = getHtmlData($uri, $rules, $range);</div><div class="line">foreach ($data as $value) &#123;</div><div class="line">    $array = explode(&apos;-&apos;, $value[&apos;date&apos;]);</div><div class="line">    if (count($array) == 1)</div><div class="line">        continue;</div><div class="line">    if ($array[0] == &apos;2018&apos;) &#123;</div><div class="line">        $uri = &apos;http://www.gdrsks.gov.cn&apos;.$value[&apos;link&apos;];</div><div class="line">        $uri = explode(&apos;&amp;&apos;,$uri)[0];</div><div class="line">        send($uri);</div><div class="line">        break;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">crontab -e</div><div class="line">30 7 * * * /usr/bin/php your_file_path</div><div class="line">systemctl restart cron</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> php </category>
            
        </categories>
        
        
        <tags>
            
            <tag> php </tag>
            
            <tag> crawler </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mysql和MariaDB 笔记]]></title>
      <url>/Mysql/</url>
      <content type="html"><![CDATA[<p><strong>含有空用户名加上localhost的组合，即任何用户名都可从localhost登陆</strong></p>
<p><strong>设置初始密码</strong></p>
<blockquote>
<p>mysqladmin -u root -p flush-privileges password “new_pwd”;</p>
</blockquote>
<p>mysqladmin 必须软链接到PATH中</p>
<blockquote>
<p>Linux中：/usr/local/mysql/bin/mysqladmin</p>
</blockquote>
<p><strong>查看用户</strong></p>
<blockquote>
<p>mysql -u root -p -e “SELECT User,Host FROM mysql.user;”;</p>
</blockquote>
<p><strong>删除组合</strong></p>
<blockquote>
<p>mysql -u root -p -e “drop USER ‘root’@’%’;”</p>
</blockquote>
<p><strong>设置密码</strong></p>
<blockquote>
<p>mysql -u root -p -e “set password for ‘root’@’127.0.0.1’ password(‘new_pwd’);”</p>
</blockquote>
<p><strong>创建用户</strong></p>
<blockquote>
<p>mysql -u root -p -e “grant usage on <em>.</em> to ‘username’@’localhost’ identified by ‘password’;”</p>
</blockquote>
<p><strong>授权</strong></p>
<blockquote>
<p>mysql -u root -p -e “grant selecr/all on <em>.</em> to ‘username’@’localhost’;”</p>
</blockquote>
<p><strong>看表结构</strong></p>
<blockquote>
<p>describe tablename;<br>show create tablename;</p>
</blockquote>
<p><strong>\G表示数据以行显示</strong></p>
<p><strong>创建数据库时指定字符集</strong></p>
<blockquote>
<p>create database databasename<br>character set utf8</p>
</blockquote>
<p><strong>创建数据库时指定默认校对方式</strong></p>
<blockquote>
<p>rollate utf8_general_ci;</p>
</blockquote>
<p><strong>备份    \表示告诉shell下一行还有 path表示路径</strong></p>
<blockquote>
<p>mysqldump –user=’username’ -p \<br>databasename [tablename] &gt; path</p>
</blockquote>
<p><strong>恢复备份</strong></p>
<blockquote>
<p>mysql –user=’username’ -p \<br>databasename [tablename] &lt; path</p>
</blockquote>
<p><strong>复制表结构</strong></p>
<blockquote>
<p>create table tablename like another_tablename;</p>
</blockquote>
<p><strong>复制表数据</strong></p>
<blockquote>
<p>insert into tablename select * from another_tablename;</p>
</blockquote>
<p><strong>修改表</strong></p>
<blockquote>
<p>alter table tablename changes</p>
</blockquote>
<p><strong>增加列</strong></p>
<blockquote>
<p>alter table tablename add column 列名 类型 索引 [after 列];</p>
</blockquote>
<p><strong>删除列</strong></p>
<blockquote>
<p>alter table tablename drop column 列名;</p>
</blockquote>
<p><strong>修改列名</strong></p>
<blockquote>
<p>alter table tablename change column old_column new_column type;</p>
</blockquote>
<p><strong>default b ‘默认值’ 表示设置默认值</strong></p>
<p><strong>修改/删除默认值</strong></p>
<blockquote>
<p>alter table tablename<br>alter columnname set/drop default [];</p>
</blockquote>
<p><strong>查看表的auto_increment值</strong></p>
<blockquote>
<p>select auto_increment from information_schema.tables where table_name = ‘tablename’;</p>
</blockquote>
<p><strong>修改auto_increment值</strong></p>
<blockquote>
<p>alter table tablename auto_increment = X;</p>
</blockquote>
<p><strong>修改/移动表</strong></p>
<blockquote>
<p>rename table tablename to tablename;</p>
</blockquote>
<p><strong>更改数据排列</strong></p>
<blockquote>
<p>alter table tablename<br>order by ..;</p>
</blockquote>
<p><strong>在select 之前 加上explain 可查mysql根据什么 [索引] 查找数据</strong></p>
<p><strong>增加索引</strong></p>
<blockquote>
<p>alter table tablename<br>add index indexname (column_name,[column_name]);</p>
</blockquote>
<p><strong>模糊搜索列名</strong></p>
<blockquote>
<p>show columns from tablename like ‘%xx%’;</p>
</blockquote>
<p><strong>插入数据(忽略错误)</strong></p>
<blockquote>
<p>insert ignore into tablename select … from tablename;</p>
</blockquote>
<p><strong>显示错误</strong></p>
<blockquote>
<p>show warnings;</p>
</blockquote>
<p><strong>替换数据(replace)</strong></p>
<blockquote>
<p>replace into tablename(column..) values(..) </p>
<p>replacet 替换的时候，如果有unique索引，是先删除原有的列，在插入新列，若无指定值，会插入默认值，若无索引，则是新插入列 </p>
</blockquote>
<p><strong>数据插入的优先级(写在 insert 和 into 之间)</strong><br><strong>insert 优先于 select</strong></p>
<ol>
<li>降低insert的优先级 (low_priority)</li>
<li>延迟插入 (delayed)  MySQL5.5.6后不提倡用了</li>
<li>提升insert的优先级 (high_priority)</li>
</ol>
<p><strong>插入时处理重复数据</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">insert into tablename </div><div class="line">select .. from tablename ...</div><div class="line">on duplicate key </div><div class="line">update ...</div></pre></td></tr></table></figure></p>
<p><strong>查询</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">select */column from tablename </div><div class="line">where column [in / is null / = / like &apos;%/_x&apos; ]</div><div class="line">order by column asc/ desc</div><div class="line">limit start,end;</div></pre></td></tr></table></figure>
<blockquote>
<p>MySQL 先按where字句获取所有数据，并在幕后将结果存放于临时表，在按order by 排序，最后根据limit获取特定序列的数据</p>
</blockquote>
<p><strong>正则匹配</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select * from tablename </div><div class="line">where column regexp [binary] &apos;...&apos;;</div><div class="line">binary 表示区分大小写</div></pre></td></tr></table></figure></p>
<p><strong>更新语句 ,update单表时可用order by 和 limit</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">update tablename set column = .. </div><div class="line">where condition</div><div class="line">order by column</div><div class="line">limit  row_count;</div></pre></td></tr></table></figure></p>
<p><strong>删除语句 ,delete单表时可用order by 和 limit</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">delete from tablename </div><div class="line">where condition</div><div class="line">order by column</div><div class="line">limit  row_count;</div></pre></td></tr></table></figure></p>
<p><strong>连删 (using 声明连接方式)</strong></p>
<p><strong>using join方式</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">delete from table [, table]</div><div class="line">using table [,...]</div><div class="line">[where condition];</div><div class="line"></div><div class="line">example：</div><div class="line">delete from humans, prize_winners</div><div class="line">using humans left join prize_winners</div><div class="line">on humans.human_id = prize_winners.human_id</div><div class="line">where name_first = &apos;Elena&apos;</div><div class="line">and name_last = &apos;Bokova&apos;</div><div class="line">and email_address like &apos;%yahoo.com&apos;;</div></pre></td></tr></table></figure></p>
<p><strong>连表时两表有同列名</strong></p>
<p><strong>join using方式</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">select * from table</div><div class="line">join table </div><div class="line">using(column)</div><div class="line">where condition;</div></pre></td></tr></table></figure></p>
<p><strong>性能比较 使用benchmark()函数</strong></p>
<hr>
<h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><p><strong>拼接字符串 concat(column,what,column)</strong></p>
<p><strong>拼接字符串 concat_ws(what,column,column…)</strong></p>
<p><strong>判断NULL ifnull(column, default)</strong></p>
<p><strong>转换小写 lower() | lcase()</strong></p>
<p><strong>转换大写 upper() | ucase()</strong></p>
<p><strong>避免识别出错 quote() 单引号包围后输出，转移字符前加 \</strong></p>
<p><strong>去开头空格 ltrim()</strong></p>
<p><strong>去尾部空格 rtrim()</strong></p>
<p><strong>trim() 不止可以去除两段空格，还可以去除别的字符如：” trim(both ‘字符’ from column)</strong></p>
<p><strong>trim() 默认是both，去除一端可指定leading或者trailing</strong></p>
<p><strong>左端填充 lpad(str,len,padstr)</strong></p>
<p><strong>右端填充 rpad(str,len,padstr)</strong></p>
<p><strong>填充空格 space(N)</strong></p>
<p><strong> MySQL 是从1开始的，而不是0</strong></p>
<p><strong>左截取 left(str,len)</strong></p>
<p><strong>右截取 left(str,len) 从右往左数</strong></p>
<p><strong>截取字符 substring(str,pos,len) 或者 mid(str,pos,len)</strong></p>
<p><strong>截取元素 substring_index(str,delim,count)</strong></p>
<p><strong>locate(substr,column) 查找字串位置，返回字串出现的首位置</strong> </p>
<p><strong>查找字串 position(substr in coliumn)</strong></p>
<p><strong>判断 if(what, yes, no)</strong></p>
<p><strong>获取字符长度 char_length(str) | character_length(str)</strong></p>
<p><strong>获取位数 bit_length(str)</strong></p>
<p><strong>比较函数 strcmp(expr1,expr2) 一致返回0</strong></p>
<p><strong>FULLTEXT索引模糊搜索 match(column) against(str)</strong></p>
<p><strong>替换函数 insert(column,pos,len,newstr) 第三个参数表示多少个字符被替换</strong></p>
<p><strong>类型转换 cast(column AS type) | convert(column,type) | convert(column using utf8)</strong></p>
<p><strong>压缩字符串，安装MySQL需带上压缩库(zlib) compress(str)</strong></p>
<p><strong>解压缩   uncompress(column)</strong></p>
<h2 id="时间函数"><a href="#时间函数" class="headerlink" title="时间函数"></a>时间函数</h2><p><strong>当前日期和时间 now() | current_timestamp() | localtimestamp() | localtime()</strong></p>
<p><strong>暂停秒数 sleep(N)</strong></p>
<p><strong>获取自身被执行的时间点 systdate() 主要用于非常复杂的sql语句，或者存储过程和触发器之中</strong></p>
<p><strong>获取当前日期 curdate()</strong></p>
<p><strong>获取当前时间 curtime()</strong></p>
<p><strong>获取当前时间戳 unix_timestamp()</strong></p>
<p><strong>抽取日期 date(column)</strong></p>
<p><strong>抽取时间 time(column)</strong></p>
<p><strong>抽取年   year(column)</strong></p>
<p><strong>抽取月   month(column)</strong></p>
<p><strong>抽取日   day(column)</strong></p>
<p><strong>抽取小时 hour(column)</strong></p>
<p><strong>抽取分   minute(column)</strong></p>
<p><strong>抽取秒   second(column)</strong></p>
<p><strong>获取指定日期的月份 monthame()</strong></p>
<p><strong>获取指定日期的星期 dayame()</strong></p>
<p><strong>抽取函数 extract(unit FROM date)</strong></p>
<table>
<thead>
<tr>
<th>lntervar</th>
<th>返回格式</th>
</tr>
</thead>
<tbody>
<tr>
<td>day</td>
<td>dd</td>
</tr>
<tr>
<td>day_hour</td>
<td>‘dd hh’</td>
</tr>
<tr>
<td>day_microsecond</td>
<td>‘dd.nn’</td>
</tr>
<tr>
<td>day_minute</td>
<td>‘dd hh:mm’</td>
</tr>
<tr>
<td>day_second</td>
<td>‘dd hh:mm:ss’</td>
</tr>
<tr>
<td>hour</td>
<td>hh</td>
</tr>
<tr>
<td>hour_microsecond</td>
<td>‘hh.nn’</td>
</tr>
<tr>
<td>hour_minute</td>
<td>‘hh:mm’</td>
</tr>
<tr>
<td>hour_second</td>
<td>‘hh:mm:ss’</td>
</tr>
<tr>
<td>microsecond</td>
<td>nn</td>
</tr>
<tr>
<td>minute</td>
<td>mm</td>
</tr>
<tr>
<td>minute_microsecond</td>
<td>‘mm.nn’</td>
</tr>
<tr>
<td>minute_second</td>
<td>‘mm:ss’</td>
</tr>
<tr>
<td>month</td>
<td>mm</td>
</tr>
<tr>
<td>quarter</td>
<td>qq</td>
</tr>
<tr>
<td>second</td>
<td>ss</td>
</tr>
<tr>
<td>second_microsecond</td>
<td>‘ss.nn’</td>
</tr>
<tr>
<td>week</td>
<td>ww</td>
</tr>
<tr>
<td>year</td>
<td>yy</td>
</tr>
<tr>
<td>year_month</td>
<td>‘yy-mm’</td>
</tr>
</tbody>
</table>
<p><strong>格式化日期 date_format(date,format)</strong></p>
<p><strong>格式化时间 time_format(time,format)</strong></p>
<table>
<thead>
<tr>
<th>代码</th>
<th>描述</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>%a</td>
<td>简写的周几</td>
<td>(Sun…Sat)</td>
</tr>
<tr>
<td>%b</td>
<td>简写的月份名字</td>
<td>(Jan…Dec)</td>
</tr>
<tr>
<td>%c</td>
<td>月份(数字形式)</td>
<td>(1…12)</td>
</tr>
<tr>
<td>%d</td>
<td>一个月中的哪一天(数字形式)</td>
<td>(00…31)</td>
</tr>
<tr>
<td>%D</td>
<td>一个月中的哪一天(带有英文后缀)</td>
<td>(1st,2nd,3rd…)</td>
</tr>
<tr>
<td>%e</td>
<td>一个月中的哪一天(数字形式)</td>
<td>(0…31)</td>
</tr>
<tr>
<td>%f</td>
<td>毫秒(数字形式)</td>
<td>(000000…999999)</td>
</tr>
<tr>
<td>%h</td>
<td>小时</td>
<td>(01…12)</td>
</tr>
<tr>
<td>%H</td>
<td>小时</td>
<td>(00…23)</td>
</tr>
<tr>
<td>%i</td>
<td>分钟</td>
<td>(00…59)</td>
</tr>
<tr>
<td>%I</td>
<td>小时</td>
<td>(01…12)</td>
</tr>
<tr>
<td>%j</td>
<td>一年中的哪一天</td>
<td>(001…366)</td>
</tr>
<tr>
<td>%k</td>
<td>小时</td>
<td>(0…23)</td>
</tr>
<tr>
<td>%l</td>
<td>小时</td>
<td>(1…12)</td>
</tr>
<tr>
<td>%m</td>
<td>月份</td>
<td>(01….12)</td>
</tr>
<tr>
<td>%M</td>
<td>月份名字</td>
<td>(January….December)</td>
</tr>
<tr>
<td>%p</td>
<td>AM或者PM</td>
<td>AM or PM</td>
</tr>
<tr>
<td>%r</td>
<td>时间，12小时制</td>
<td>(hh:mm:ss[A</td>
<td>P]M)</td>
</tr>
<tr>
<td>%s</td>
<td>秒</td>
<td>(00…59)</td>
</tr>
<tr>
<td>%S</td>
<td>秒</td>
<td>(00…59)</td>
</tr>
<tr>
<td>%T</td>
<td>时间，24小时制</td>
<td>(hh:mm:ss)</td>
</tr>
<tr>
<td>%u</td>
<td>一年中的第几周(以周一为一周的第一天)</td>
<td>(0…52)</td>
</tr>
<tr>
<td>%U</td>
<td>一年中的第几周(以周日为一周的第一天)</td>
<td>(0…52)</td>
</tr>
<tr>
<td>%v</td>
<td>一年中的第几周(以周一为一周的第一天，与%x一起使用)</td>
<td>(1…53)</td>
</tr>
<tr>
<td>%V</td>
<td>一年中的第几周(以周日为一周的第一天，与%X一起使用)</td>
<td>(1…53)</td>
</tr>
<tr>
<td>%w</td>
<td>一周中的哪一天</td>
<td>(0=Sunday…6=Saturday)</td>
</tr>
<tr>
<td>%W</td>
<td>周几</td>
<td>(Sunday….Saturday)</td>
</tr>
<tr>
<td>%x</td>
<td>某一周所属的年份(以周一为一周的第一天,4位数字形式，与%v一起使用)</td>
<td>(yyyy)</td>
</tr>
<tr>
<td>%X</td>
<td>某一周所属的年份(以周日为一周的第一天,4位数字形式，与%V一起使用)</td>
<td>(yyyy)</td>
</tr>
<tr>
<td>%y</td>
<td>年份(两位数字形式)</td>
<td>(yy)</td>
</tr>
<tr>
<td>%Y</td>
<td>年份(四位数字形式)</td>
<td>(yyyy)</td>
</tr>
<tr>
<td>%%</td>
<td>字面的%%</td>
<td>‘%’</td>
</tr>
</tbody>
</table>
<p><strong>获取标准的日期格式 get_format({DATE|TIME|DATETIME}, {‘EUR’|’USA’|’JIS’|’ISO’|’INTERNAL’})</strong></p>
<ul>
<li>EUR 代表欧洲</li>
<li>USA 代表美国</li>
<li>JIS 代表日本工业标准</li>
<li>ISO 代表ISO 9075标准</li>
<li>INTERNAL 代表没有标点符号的时间格式</li>
</ul>
<p><strong>时区时间转换 convert_tz(datetime,from_tz,to_tz)</strong></p>
<p><strong>日期增加 date_add(date,interval expr unit)</strong></p>
<p><strong>日期缩减 date_sub(date,interval expr unit)</strong></p>
<p><strong>时间换算秒  time_to_sec(time)</strong></p>
<p><strong>秒换算时间 sec_to_time(seconds)</strong></p>
<p><strong>日期加减函数 period_add(P,N) 参数为字符串</strong></p>
<p><strong>日期比较 datediff(expr1,expr2)</strong></p>
<p><strong>日期比较 timediff(expr1,expr2)</strong></p>
<h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><p><strong>计算总数 count(expr1)</strong></p>
<p><strong>按组分 group by </strong></p>
<p><strong>求组分的同时求总数，可在group by 中加入 with rollup</strong></p>
<p><strong>求和 sum(expr)</strong></p>
<p><strong>求平均 avg([DISTINCT] expr)</strong></p>
<p><strong>求最大 max(expr)</strong></p>
<p><strong>求最小 min(expr)</strong></p>
<p><strong>组拼接 group_concat(expr)</strong></p>
<p><strong>四舍五入 round(X,D)</strong></p>
<p><strong>下舍入 floor(X)</strong></p>
<p><strong>上舍入 ceiling(X)</strong></p>
<p><strong>去掉小数 truncate(X,D)</strong></p>
<p><strong>绝对值 abs(X)</strong></p>
<p><strong>判断正负  sign(X)</strong></p>
<p><strong>设置用户自定义变量  set @name = expr;</strong></p>
<h2 id="数据库管理"><a href="#数据库管理" class="headerlink" title="数据库管理"></a>数据库管理</h2><p><strong>查看用户权限</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show grants for &apos;username&apos;;</div></pre></td></tr></table></figure></p>
<p>结果中的 <em>.</em> 是指授权使用所有数据库和所有表, ‘username’@’%’中主机是通配符 % ，无论何时都应该指定主机。</p>
<p><strong>删除用户账号 drop user ‘username’@’..’, 删除前先查看mysql数据库的user表</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select User,Host from mysql.user where User like &apos;%username%&apos;;</div></pre></td></tr></table></figure></p>
<p><strong>授权 grant privilege [(column…)] on database.table to ‘username’@’..’</strong></p>
<table>
<thead>
<tr>
<th>权限</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>all [privileges]</td>
<td>授予所有基本的权限，但不包括grant option</td>
</tr>
<tr>
<td>alter</td>
<td>允许使用alter table 语句，但得现有create和insert权限，如果想重命名一个表。还得现有drop权限，这里有一个安全隐患：用户可以通过对表改名来获得访问权</td>
</tr>
<tr>
<td>alter routine</td>
<td>允许用户账号更改或删除存储过程，即允许使用alter function、alter procedure、drop function和drop procedure语句</td>
</tr>
<tr>
<td>create</td>
<td>允许使用create table 语句。如果想定义索引，还需要index权限</td>
</tr>
<tr>
<td>create routine</td>
<td>允许用户账号创建存储过程，即允许使用create function 和 create procedure 语句。并且，用户账号对自己创建的过程拥有alter routine权限</td>
</tr>
<tr>
<td>create temporary tables</td>
<td>允许使用create temporary tables 语句</td>
</tr>
<tr>
<td>create user</td>
<td>允许用户账号执行以下用户账号管理语句：create user、raname user、revoke all privileges和drop user</td>
</tr>
<tr>
<td>create view</td>
<td>允许使用create view 语句</td>
</tr>
<tr>
<td>delete</td>
<td>允许使用delete语句</td>
</tr>
<tr>
<td>drop</td>
<td>允许使用drop table 和 truncate语句</td>
</tr>
<tr>
<td>event</td>
<td>允许用户账号为事件调度器创建事件，即允许使用create event、alter event 和 drop event 语句</td>
</tr>
<tr>
<td>execute</td>
<td>允许执行存储过程，即允许使用execute语句</td>
</tr>
<tr>
<td>file</td>
<td>允许使用select … into outfile 和 load data infile语句来导出数据到文件系统，或从文件系统导入数据。还有一个安全隐患。可通过secure_file_priv 变量来限制指定目录</td>
</tr>
<tr>
<td>index</td>
<td>允许使用create index 和 drop index 语句</td>
</tr>
<tr>
<td>insert</td>
<td>允许使用insert语句。这是执行analyze table、optimize table 和 repair table 语句的前提条件</td>
</tr>
<tr>
<td>lock tables</td>
<td>允许使用lock tables 语句，但用户必须先对表有select权限</td>
</tr>
<tr>
<td>process</td>
<td>允许使用show processlist和show endine语句</td>
</tr>
<tr>
<td>reload</td>
<td>允许使用flush 语句</td>
</tr>
<tr>
<td>replication client</td>
<td>允许用户查询主从服务器的状态信息，即允许使用show master status、show slave status 和 show binary logs语句</td>
</tr>
<tr>
<td>replication slave</td>
<td>进行从服务器复制时，需要此权限，它将允许读取主服务器的二进制日志事件</td>
</tr>
<tr>
<td>select</td>
<td>允许使用select 语句</td>
</tr>
<tr>
<td>show databases</td>
<td>允许使用show databases 语句来查看所有数据库，包括那些没有权限的数据库</td>
</tr>
<tr>
<td>show view</td>
<td>允许使用show create view 语句</td>
</tr>
<tr>
<td>shutdown</td>
<td>允许使用mysqladmin工具的shutdown选项</td>
</tr>
<tr>
<td>super</td>
<td>允许使用change master to、kill、purge binary logs、set global语句，以及mysqladmmin 工具的debug选项</td>
</tr>
<tr>
<td>trigger</td>
<td>允许用户账号创建或删除触发器，即允许使用create trigger 和 drop trigger 语句</td>
</tr>
<tr>
<td>update</td>
<td>允许使用update 语句</td>
</tr>
<tr>
<td>usage</td>
<td>可用于创建无权限的用户，或在不影响用户现有权限的情况下修改某某方面的属性</td>
</tr>
</tbody>
</table>
<p><strong>移除权限</strong></p>
<blockquote>
<p>revoke privileges on database.table from ‘username’@’..’;</p>
</blockquote>
<p><strong>获取会话标识  需process权限</strong></p>
<blockquote>
<p>show processlist;</p>
</blockquote>
<p><strong>结束会话 id为获取会话的id 需super权限</strong></p>
<blockquote>
<p>kill id;</p>
</blockquote>
<p><strong>强迫用户修改密码</strong></p>
<blockquote>
<p>alter user ‘username’@’localhost’ password expire;</p>
</blockquote>
<p><strong>修改密码</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">set password for &apos;username&apos;@&apos;localhost&apos; = &apos;encrpt_password&apos;;</div><div class="line">或者</div><div class="line">set password for &apos;username&apos;@&apos;localhost&apos; = password(&apos;password&apos;);</div></pre></td></tr></table></figure></p>
<p><strong>重置root密码</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">新建文本文件，输入以下内容</div><div class="line">UPDATE mysql.user SET Password=PASSWORD(&apos;new_pwd&apos;) WHERE User=&apos;root&apos;;</div><div class="line">FLUSH PRIVILEGES;</div><div class="line">将该文件起名为rt-reset.sql，并放在受保护的目录，然后用 --init-file，启动mysql：</div><div class="line">mysqld_sefe --init-file=/root/rt-reset.sql &amp;</div><div class="line">改完之后，删除rt-reset.sql</div></pre></td></tr></table></figure></p>
<p><strong>用户改名 需create user和对mysql数据库update 权限</strong></p>
<blockquote>
<p>rename user ‘username’@’localhost’ to ‘newusername’@’localhost’;</p>
</blockquote>
<p><strong>创建角色</strong></p>
<blockquote>
<p>create role ‘role_name’;</p>
</blockquote>
<p><strong>授权给角色</strong></p>
<blockquote>
<p>grant privilege on databases.table to ‘rolename’@’localhost’;</p>
</blockquote>
<p><strong>给用户赋予角色</strong></p>
<blockquote>
<p>grant ‘role_name’ to ‘username’@’localhost’;</p>
</blockquote>
<p><strong>用户登陆后设定角色</strong></p>
<blockquote>
<p>set role ‘rolename’;</p>
</blockquote>
<p><strong>用户脱离角色</strong></p>
<blockquote>
<p>set role none;</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python爬虫学习]]></title>
      <url>/python-crawler/</url>
      <content type="html"><![CDATA[<p>python的爬虫相对来说，会比较容易上手一点，采用官方和第三方的类库实现</p>
<p>本篇文章采用requests，BeautifulSoup这两个第三方库来编写爬虫</p>
<p>并采用jieba分词，分析文本中的关键词及其权重<br><a id="more"></a></p>
<h3 id="网页下载器"><a href="#网页下载器" class="headerlink" title="网页下载器"></a>网页下载器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line">response = requests.get(url)</div><div class="line"><span class="keyword">if</span> response.status_code == <span class="number">200</span></div><div class="line">	<span class="keyword">return</span> response.content</div></pre></td></tr></table></figure>
<p>在这里使用了http的get方式，传入要扒的网址，然后判断响应码</p>
<p>若返回200，则响应成功，返回html的内容</p>
<p><a href="http://docs.python-requests.org/zh_CN/latest/user/quickstart.html" target="_blank" rel="external">requests学习</a></p>
<h3 id="网页分析器"><a href="#网页分析器" class="headerlink" title="网页分析器"></a>网页分析器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> BeautifulSoup</div><div class="line">soup = BeautifulSoup(html,<span class="string">'html.parser'</span>)</div><div class="line">print(soup.prettify())</div></pre></td></tr></table></figure>
<p>这里的html为上文中的response.content，并采用html_parser解析html</p>
<p>这里只是简单地打印了soup的内容而已</p>
<p>附上<a href="https://www.crummy.com/software/BeautifulSoup/" target="_blank" rel="external">BeautifulSoup文档</a>和<a href="http://cuiqingcai.com/1319.html" target="_blank" rel="external">一篇不错的博文</a></p>
<h3 id="jieba分词地使用"><a href="#jieba分词地使用" class="headerlink" title="jieba分词地使用"></a>jieba分词地使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> jieba</div><div class="line">tags = jieba.analyse.extract_tags(sentence , topK=<span class="number">20</span>, withWeight=<span class="keyword">True</span>)</div><div class="line"><span class="keyword">for</span> item <span class="keyword">in</span> tags:</div><div class="line">	print(item[<span class="number">0</span>] + <span class="string">'\t'</span> + str(int(item[<span class="number">1</span>] * <span class="number">1000</span>)))</div></pre></td></tr></table></figure>
<p>此处使用jieba分词的基于TF-IDF关键词抽取</p>
<ul>
<li>sentence 为待提取的文本</li>
<li>topK 为返回几个 TF/IDF 权重最大的关键词，默认值为 20</li>
<li><p>withWeight 为是否一并返回关键词权重值，默认值为 False</p>
<p>附上<a href="http://cuiqingcai.com/1319.html" target="_blank" rel="external">jieba分词github网址</a><br>本文只是初步涉及python爬虫的学习，后续将继续学习，进阶python爬虫学习<br>附上一篇<a href="https://github.com/huizhe1/web-crawler" target="_blank" rel="external">实战</a>的代码</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> crawler </tag>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<a id="more"></a>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> start </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
